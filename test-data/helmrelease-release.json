{
    "name": "helmrelease-ex",
    "info": {
      "status": {
        "code": 1,
        "notes": "The Node.js sample can be viewed in the web browser.\n\nexport SAMPLE_NODE_PORT=$(kubectl get --namespace default -o jsonpath=\"{.spec.ports[0].nodePort}\" services helmrelease-ex-nodejssample-nodejs)\nexport SAMPLE_NODE_IP=$(kubectl get nodes --namespace default -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n\necho \"Open your web browser at http:\/\/${SAMPLE_NODE_IP}:${SAMPLE_NODE_PORT}\"\n"
      },
      "first_deployed": {
        "seconds": 1563461917,
        "nanos": 743641026
      },
      "last_deployed": {
        "seconds": 1563461917,
        "nanos": 743641026
      },
      "Description": "Install complete"
    },
    "chart": {
      "metadata": {
        "name": "ibm-nodejs-sample",
        "sources": [
          "https:\/\/github.com\/ibm-developer\/icp-nodejs-sample"
        ],
        "version": "2.0.0",
        "description": "A self-describing Node.js sample application",
        "keywords": [
          "OpenSource",
          "amd64",
          "ppc64le",
          "s390x",
          "ICP",
          "IKS",
          "runtime"
        ],
        "icon": "https:\/\/nodejs.org\/static\/images\/logos\/nodejs-new-pantone-black.png",
        "appVersion": "2.0.0",
        "tillerVersion": ">=2.6.0"
      },
      "templates": [
        {
          "name": "templates\/NOTES.txt",
          "data": "e3stIGluY2x1ZGUgInNjaC5jb25maWcuaW5pdCIgKGxpc3QgLiAibm9kZWpzU2FtcGxlLnNjaC5jaGFydC5jb25maWcudmFsdWVzIikgLX19Cnt7LSAkY29tcE5hbWUgOj0gLnNjaC5jaGFydC5jb21wb25lbnRzLm5vZGVqc1NhbXBsZS5uYW1lIC19fQogClRoZSBOb2RlLmpzIHNhbXBsZSBjYW4gYmUgdmlld2VkIGluIHRoZSB3ZWIgYnJvd3Nlci4KCmV4cG9ydCBTQU1QTEVfTk9ERV9QT1JUPSQoa3ViZWN0bCBnZXQgLS1uYW1lc3BhY2Uge3sgLlJlbGVhc2UuTmFtZXNwYWNlIH19IC1vIGpzb25wYXRoPSJ7LnNwZWMucG9ydHNbMF0ubm9kZVBvcnR9IiBzZXJ2aWNlcyB7eyBpbmNsdWRlICJzY2gubmFtZXMuZnVsbENvbXBOYW1lIiAobGlzdCAuICRjb21wTmFtZSkgfX0pCmV4cG9ydCBTQU1QTEVfTk9ERV9JUD0kKGt1YmVjdGwgZ2V0IG5vZGVzIC0tbmFtZXNwYWNlIHt7IC5SZWxlYXNlLk5hbWVzcGFjZSB9fSAtbyBqc29ucGF0aD0iey5pdGVtc1swXS5zdGF0dXMuYWRkcmVzc2VzWzBdLmFkZHJlc3N9IikKCmVjaG8gIk9wZW4geW91ciB3ZWIgYnJvd3NlciBhdCBodHRwOi8vJHtTQU1QTEVfTk9ERV9JUH06JHtTQU1QTEVfTk9ERV9QT1JUfSIK"
        },
        {
          "name": "templates\/_helpers.tpl",
          "data": "e3svKkNvcHlyaWdodCBJQk0gQ29ycG9yYXRpb24gMjAxOC4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4qL319Cnt7LyogdmltOiBzZXQgZmlsZXR5cGU9bXVzdGFjaGU6ICovfX0Ke3svKgpFeHBhbmQgdGhlIG5hbWUgb2YgdGhlIGNoYXJ0LgoqL319Cnt7LSBkZWZpbmUgIm5hbWUiIC19fQp7ey0gZGVmYXVsdCAuQ2hhcnQuTmFtZSAuVmFsdWVzLm5hbWVPdmVycmlkZSB8IHRydW5jIDI0IHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cgp7ey8qCkNyZWF0ZSBhIGRlZmF1bHQgZnVsbHkgcXVhbGlmaWVkIGFwcCBuYW1lLgpXZSB0cnVuY2F0ZSBhdCAyNCBjaGFycyBiZWNhdXNlIHNvbWUgS3ViZXJuZXRlcyBuYW1lIGZpZWxkcyBhcmUgbGltaXRlZCB0byB0aGlzIChieSB0aGUgRE5TIG5hbWluZyBzcGVjKS4KKi99fQp7ey0gZGVmaW5lICJmdWxsbmFtZSIgLX19Cnt7LSAkbmFtZSA6PSBkZWZhdWx0IC5DaGFydC5OYW1lIC5WYWx1ZXMubmFtZU92ZXJyaWRlIC19fQp7ey0gcHJpbnRmICIlcy0lcyIgLlJlbGVhc2UuTmFtZSAkbmFtZSB8IHRydW5jIDI0IHwgdHJpbVN1ZmZpeCAiLSIgLX19Cnt7LSBlbmQgLX19Cg=="
        },
        {
          "name": "templates\/_sch-chart-config.tpl",
          "data": "e3stIC8qCkNoYXJ0IHNwZWNpZmljIGNvbmZpZyBmaWxlIGZvciBTQ0ggKFNoYXJlZCBDb25maWd1cmFibGUgSGVscGVycykKCl9zY2gtY2hhcnQtY29uZmlnLnRwbCBpcyBhIGNvbmZpZyBmaWxlIGZvciB0aGUgY2hhcnQgdG8gc3BlY2lmeSBhZGRpdGlvbmFsIAp2YWx1ZXMgYW5kL29yIG92ZXJyaWRlIHZhbHVlcyBkZWZpbmVkIGluIHRoZSBzY2gvX2NvbmZpZy50cGwgZmlsZS4KIAoqLyAtfX0KCnt7LSAvKgoic2NoLmNoYXJ0LmNvbmZpZy52YWx1ZXMiIGNvbnRhaW5zIHRoZSBjaGFydCBzcGVjaWZpYyB2YWx1ZXMgdXNlZCB0byBvdmVycmlkZSBvciBwcm92aWRlCmFkZGl0aW9uYWwgY29uZmlndXJhdGlvbiB2YWx1ZXMgdXNlZCBieSB0aGUgU2hhcmVkIENvbmZpZ3VyYWJsZSBIZWxwZXJzLgoqLyAtfX0Ke3stIGRlZmluZSAibm9kZWpzU2FtcGxlLnNjaC5jaGFydC5jb25maWcudmFsdWVzIiAtfX0Kc2NoOgogIGNoYXJ0OgogICAgYXBwTmFtZTogIm5vZGVqc1NhbXBsZSIKICAgIGNvbXBvbmVudHM6CiAgICAgIG5vZGVqc1NhbXBsZToKICAgICAgICBuYW1lOiAibm9kZWpzIgogICAgbWV0ZXJpbmc6CiAgICAgIHByb2R1Y3ROYW1lOiAiTm9kZS5qcyBTYW1wbGUgQXBwbGljYXRpb24iCiAgICAgIHByb2R1Y3RJRDogIk5vZGUuanNfU2FtcGxlX0FwcGxpY2F0aW9uXzIuMC4wX3BlcnBldHVhbF8wMDAwMCIKICAgICAgcHJvZHVjdFZlcnNpb246ICIyLjAuMCIKICAgIG5vZGVBZmZpbml0eToKICAgICAgbm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nOgogICAgICAgIG9wZXJhdG9yOiBJbgogICAgICAgIHZhbHVlczoKICAgICAgICAtIGFtZDY0CiAgICAgICAgLSBwcGM2NGxlCiAgICAgICAgLSBzMzkweAogICAgICBub2RlQWZmaW5pdHlQcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nOgogICAgICAgIGFtZDY0OgogICAgICAgICAgd2VpZ2h0OiAzCiAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgIGtleTogYmV0YS5rdWJlcm5ldGVzLmlvL2FyY2gKe3stIGVuZCAtfX0K"
        },
        {
          "name": "templates\/deployment.yaml",
          "data": "IyBMaWNlbnNlZCBNYXRlcmlhbHMgLSBQcm9wZXJ0eSBvZiBJQk0KIyAoQykgQ29weXJpZ2h0IElCTSBDb3JwLiAyMDE4LiBBbGwgUmlnaHRzIFJlc2VydmVkLgojIFVTIEdvdmVybm1lbnQgVXNlcnMgUmVzdHJpY3RlZCBSaWdodHMgLSBVc2UsIGR1cGxpY2F0aW9uIG9yIGRpc2Nsb3N1cmUgcmVzdHJpY3RlZCBieSBHU0EgQURQIFNjaGVkdWxlIENvbnRyYWN0IHdpdGggSUJNIENvcnAuCnt7LSBpbmNsdWRlICJzY2guY29uZmlnLmluaXQiIChsaXN0IC4gIm5vZGVqc1NhbXBsZS5zY2guY2hhcnQuY29uZmlnLnZhbHVlcyIpIC19fQp7ey0gJGNvbXBOYW1lIDo9ICAuc2NoLmNoYXJ0LmNvbXBvbmVudHMubm9kZWpzU2FtcGxlLm5hbWUgfX0KYXBpVmVyc2lvbjogZXh0ZW5zaW9ucy92MWJldGExCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZToge3sgaW5jbHVkZSAic2NoLm5hbWVzLmZ1bGxDb21wTmFtZSIgKGxpc3QgLiAkY29tcE5hbWUpIHwgcXVvdGUgfX0KICBsYWJlbHM6Cnt7IGluY2x1ZGUgInNjaC5tZXRhZGF0YS5sYWJlbHMuc3RhbmRhcmQiIChsaXN0IC4gJGNvbXBOYW1lKSB8IGluZGVudCA0IH19CnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgcmVsZWFzZTogInt7IC5SZWxlYXNlLk5hbWUgfX0iCiAge3sgaWYgbm90IC5WYWx1ZXMuYXV0b3NjYWxpbmcuZW5hYmxlZCAtfX0KICByZXBsaWNhczogMQogIHt7LSBlbmQgfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6Cnt7IGluY2x1ZGUgInNjaC5tZXRhZGF0YS5sYWJlbHMuc3RhbmRhcmQiIChsaXN0IC4gJGNvbXBOYW1lKSB8IGluZGVudCA4IH19CiAgICAgICMgSGVyZSdzIHdoZXJlIGEgdXNlciBjb3VsZCBkZWZpbmUgdGhlaXIgb3duIGFubm90YXRpb24gdG9vCiAgICAgIGFubm90YXRpb25zOgp7ey0gaW5jbHVkZSAic2NoLm1ldGFkYXRhLmFubm90YXRpb25zLm1ldGVyaW5nIiAobGlzdCAuIC5zY2guY2hhcnQubWV0ZXJpbmcpIHwgaW5kZW50IDggfX0KICAgIHNwZWM6CiAgICAgIGhvc3ROZXR3b3JrOiBmYWxzZQogICAgICBob3N0UElEOiBmYWxzZQogICAgICBob3N0SVBDOiBmYWxzZQogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICAgICAgcnVuQXNVc2VyOiAxMDAwCiAgICAgIGFmZmluaXR5Ogp7ey0gaW5jbHVkZSAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eSIgKGxpc3QgLiAuc2NoLmNoYXJ0Lm5vZGVBZmZpbml0eSkgfCBpbmRlbnQgOCB9fQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IHt7IC5DaGFydC5OYW1lICB9fQogICAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZS5yZXBvc2l0b3J5IH19Ont7IC5WYWx1ZXMuaW1hZ2UudGFnIH19IgogICAgICAgIGltYWdlUHVsbFBvbGljeToge3sgLlZhbHVlcy5pbWFnZS5wdWxsUG9saWN5IH19CiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgcHJpdmlsZWdlZDogZmFsc2UKICAgICAgICAgIHJlYWRPbmx5Um9vdEZpbGVzeXN0ZW06IHRydWUKICAgICAgICAgIGFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbjogZmFsc2UKICAgICAgICAgIHJ1bkFzTm9uUm9vdDogdHJ1ZQogICAgICAgICAgcnVuQXNVc2VyOiAxMDAwCiAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgIGRyb3A6CiAgICAgICAgICAgIC0gQUxMCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGgKICAgICAgICAgICAgcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLnBvcnQgfX0KICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IHt7IC5WYWx1ZXMubGl2ZW5lc3NQcm9iZS5pbml0aWFsRGVsYXlTZWNvbmRzfX0KICAgICAgICAgIHBlcmlvZFNlY29uZHM6IHt7IC5WYWx1ZXMubGl2ZW5lc3NQcm9iZS5wZXJpb2RTZWNvbmRzfX0KICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGgKICAgICAgICAgICAgcG9ydDoge3sgLlZhbHVlcy5zZXJ2aWNlLnBvcnQgfX0KICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgY3B1OiAie3sgLlZhbHVlcy5yZXNvdXJjZXMucmVxdWVzdHMuY3B1IH19IgogICAgICAgICAgICBtZW1vcnk6ICJ7eyAuVmFsdWVzLnJlc291cmNlcy5yZXF1ZXN0cy5tZW1vcnkgfX0iCiAgICAgICAgICBsaW1pdHM6CiAgICAgICAgICAgIGNwdTogInt7IC5WYWx1ZXMucmVzb3VyY2VzLmxpbWl0cy5jcHUgfX0iCiAgICAgICAgICAgIG1lbW9yeTogInt7IC5WYWx1ZXMucmVzb3VyY2VzLmxpbWl0cy5tZW1vcnkgfX0iCiAgICAgICAgZW52OgogICAgICAgICAgLSBuYW1lOiBQT1JUCiAgICAgICAgICAgIHZhbHVlIDogInt7IC5WYWx1ZXMuc2VydmljZS5wb3J0IH19Igo="
        },
        {
          "name": "templates\/hpa.yaml",
          "data": "IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojIExpY2Vuc2VkIE1hdGVyaWFscyAtIFByb3BlcnR5IG9mIElCTS4KIyBDb3B5cmlnaHQgSUJNIENvcnBvcmF0aW9uIDIwMTguIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiMgVS5TLiBHb3Zlcm5tZW50IFVzZXJzIFJlc3RyaWN0ZWQgUmlnaHRzIC0gVXNlLCBkdXBsaWNhdGlvbiBvciBkaXNjbG9zdXJlIAojIHJlc3RyaWN0ZWQgYnkgR1NBIEFEUCBTY2hlZHVsZSBDb250cmFjdCB3aXRoIElCTSBDb3JwLgojCiMgQ29udHJpYnV0b3JzOgojICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwp7eyBpZiAuVmFsdWVzLmF1dG9zY2FsaW5nLmVuYWJsZWQgLX19CmFwaVZlcnNpb246IGF1dG9zY2FsaW5nL3YxCmtpbmQ6IEhvcml6b250YWxQb2RBdXRvc2NhbGVyCm1ldGFkYXRhOgogIG5hbWU6IHt7IHRlbXBsYXRlICJmdWxsbmFtZSIgLiB9fS1ocGEKICBsYWJlbHM6CiAgICBjaGFydDogInt7IC5DaGFydC5OYW1lIH19LXt7IC5DaGFydC5WZXJzaW9uIH19IgogICAgYXBwOiB7eyB0ZW1wbGF0ZSAiZnVsbG5hbWUiIC4gfX0KICAgIHJlbGVhc2U6ICJ7eyAuUmVsZWFzZS5OYW1lIH19IgogICAgaGVyaXRhZ2U6ICJ7eyAuUmVsZWFzZS5TZXJ2aWNlIH19IiAgICAKc3BlYzoKICBtYXhSZXBsaWNhczoge3sgLlZhbHVlcy5hdXRvc2NhbGluZy5tYXhSZXBsaWNhcyB9fQogIG1pblJlcGxpY2FzOiB7eyAuVmFsdWVzLmF1dG9zY2FsaW5nLm1pblJlcGxpY2FzIH19CgogIG1ldHJpY3M6IAogIC0gdHlwZTogUmVzb3VyY2UKICAgIHJlc291cmNlOiAKICAgICAgbmFtZTogY3B1CiAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjoge3sgLlZhbHVlcy5hdXRvc2NhbGluZy5tZXRyaWNzLmNwdS50YXJnZXRBdmVyYWdlVXRpbGl6YXRpb24gfX0KCiAgc2NhbGVUYXJnZXRSZWY6CiAgICBhcGlWZXJzaW9uOiBleHRlbnNpb25zL3YxYmV0YTEKICAgIGtpbmQ6IERlcGxveW1lbnQKICAgIG5hbWU6IHt7IHRlbXBsYXRlICJmdWxsbmFtZSIgLiB9fQp7ey0gZW5kIH19Cg=="
        },
        {
          "name": "templates\/service.yaml",
          "data": "e3stIGluY2x1ZGUgInNjaC5jb25maWcuaW5pdCIgKGxpc3QgLiAibm9kZWpzU2FtcGxlLnNjaC5jaGFydC5jb25maWcudmFsdWVzIikgLX19Cnt7LSAkY29tcE5hbWUgOj0gLnNjaC5jaGFydC5jb21wb25lbnRzLm5vZGVqc1NhbXBsZS5uYW1lIC19fQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IHt7IGluY2x1ZGUgInNjaC5uYW1lcy5mdWxsQ29tcE5hbWUiIChsaXN0IC4gJGNvbXBOYW1lKSB9fQogIGxhYmVsczoKe3sgaW5jbHVkZSAic2NoLm1ldGFkYXRhLmxhYmVscy5zdGFuZGFyZCIgKGxpc3QgLiAkY29tcE5hbWUpIHwgaW5kZW50IDQgfX0KICBhbm5vdGF0aW9uczoKICAgIHByb21ldGhldXMuaW8vc2NyYXBlOiAndHJ1ZScKc3BlYzoKICB0eXBlOiB7eyAuVmFsdWVzLnNlcnZpY2UudHlwZSB9fQogIHBvcnRzOgogICAgLSBwb3J0OiB7eyAuVmFsdWVzLnNlcnZpY2UucG9ydCB9fQogIHNlbGVjdG9yOgogICAgYXBwOiB7eyBpbmNsdWRlICJzY2gubmFtZXMuYXBwTmFtZSIgKGxpc3QgLikgfX0KICAgIHJlbGVhc2U6IHt7IC5SZWxlYXNlLk5hbWUgfX0KICAgIGNvbXBvbmVudDoge3sgJGNvbXBOYW1lIH19Cg=="
        },
        {
          "name": "templates\/tests\/dash-endpoint-test.yaml",
          "data": "IyBIZWxtIHRlc3QgLSBDaGVja3MgYWNjZXNzIHRvIHRoZSBhcHBtZXRyaWNzIGRhc2hib2FyZCBlbmRwb2ludAp7ey0gaW5jbHVkZSAic2NoLmNvbmZpZy5pbml0IiAobGlzdCAuICJub2RlanNTYW1wbGUuc2NoLmNoYXJ0LmNvbmZpZy52YWx1ZXMiKSAtfX0Ke3stICRjb21wTmFtZSA6PSAgLnNjaC5jaGFydC5jb21wb25lbnRzLm5vZGVqc1NhbXBsZS5uYW1lIC19fQp7ey0gJHRlc3RDb21wTmFtZSA6PSAgcHJpbnRmICIlcy0lcyIgJGNvbXBOYW1lICJkYXNoLWVuZHBvaW50LXRlc3QiIC19fQp7ey0gJGZ1bGxUZXN0Q29tcE5hbWUgOj0gaW5jbHVkZSAic2NoLm5hbWVzLmZ1bGxDb21wTmFtZSIgKGxpc3QgLiAkdGVzdENvbXBOYW1lKSB9fQphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgbmFtZTogInt7ICRmdWxsVGVzdENvbXBOYW1lIH19IgogIGFubm90YXRpb25zOgogICAgImhlbG0uc2gvaG9vayI6IHRlc3Qtc3VjY2VzcwogIGxhYmVsczoKe3sgaW5jbHVkZSAic2NoLm1ldGFkYXRhLmxhYmVscy5zdGFuZGFyZCIgKGxpc3QgLiAkdGVzdENvbXBOYW1lKSB8IGluZGVudCA0IH19CnNwZWM6CiAgaG9zdE5ldHdvcms6IGZhbHNlCiAgaG9zdFBJRDogZmFsc2UKICBob3N0SVBDOiBmYWxzZQogIHNlY3VyaXR5Q29udGV4dDoKICAgIHJ1bkFzTm9uUm9vdDogdHJ1ZQogICAgcnVuQXNVc2VyOiAxMDAwIAogIGFmZmluaXR5Ogp7ey0gaW5jbHVkZSAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eSIgKGxpc3QgLiAuc2NoLmNoYXJ0Lm5vZGVBZmZpbml0eSkgfCBpbmRlbnQgNCB9fQogIHJlc3RhcnRQb2xpY3k6IE5ldmVyCiAgY29udGFpbmVyczoKICAgIC0gbmFtZTogInt7ICRmdWxsVGVzdENvbXBOYW1lIH19IgogICAgICBpbWFnZTogInt7IC5WYWx1ZXMuaW1hZ2UucmVwb3NpdG9yeSB9fTp7eyAuVmFsdWVzLmltYWdlLnRhZyB9fSIKICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgIHByaXZpbGVnZWQ6IGZhbHNlCiAgICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZQogICAgICAgIGFsbG93UHJpdmlsZWdlRXNjYWxhdGlvbjogZmFsc2UKICAgICAgICBydW5Bc05vblJvb3Q6IHRydWUKICAgICAgICBydW5Bc1VzZXI6IDEwMDAgCiAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgZHJvcDoKICAgICAgICAgIC0gQUxMCiAgICAgIGNvbW1hbmQ6IFsid2dldCJdCiAgICAgIGFyZ3M6ICBbJ3t7IGluY2x1ZGUgInNjaC5uYW1lcy5mdWxsQ29tcE5hbWUiIChsaXN0IC4gJGNvbXBOYW1lKSB9fTp7eyAuVmFsdWVzLnNlcnZpY2UucG9ydCB9fS9hcHBtZXRyaWNzLWRhc2gnLCctTycsJy0nXQo="
        },
        {
          "name": "templates\/tests\/main-endpoint-test.yaml",
          "data": "IyBIZWxtIHRlc3QgLSBDaGVja3MgYWNjZXNzIHRvIHRoZSBtYWltIGVuZHBvaW50Cnt7LSBpbmNsdWRlICJzY2guY29uZmlnLmluaXQiIChsaXN0IC4gIm5vZGVqc1NhbXBsZS5zY2guY2hhcnQuY29uZmlnLnZhbHVlcyIpIC19fQp7ey0gJGNvbXBOYW1lIDo9ICAuc2NoLmNoYXJ0LmNvbXBvbmVudHMubm9kZWpzU2FtcGxlLm5hbWUgLX19Cnt7LSAkdGVzdENvbXBOYW1lIDo9ICBwcmludGYgIiVzLSVzIiAkY29tcE5hbWUgIm1haW4tZW5kcG9pbnQtdGVzdCIgLX19Cnt7LSAkZnVsbFRlc3RDb21wTmFtZSA6PSBpbmNsdWRlICJzY2gubmFtZXMuZnVsbENvbXBOYW1lIiAobGlzdCAuICR0ZXN0Q29tcE5hbWUpIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiAie3sgJGZ1bGxUZXN0Q29tcE5hbWUgfX0iCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogdGVzdC1zdWNjZXNzCiAgbGFiZWxzOgp7eyBpbmNsdWRlICJzY2gubWV0YWRhdGEubGFiZWxzLnN0YW5kYXJkIiAobGlzdCAuICR0ZXN0Q29tcE5hbWUpIHwgaW5kZW50IDQgfX0Kc3BlYzoKICBob3N0TmV0d29yazogZmFsc2UKICBob3N0UElEOiBmYWxzZQogIGhvc3RJUEM6IGZhbHNlCiAgc2VjdXJpdHlDb250ZXh0OgogICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICBydW5Bc1VzZXI6IDEwMDAgCiAgYWZmaW5pdHk6Cnt7LSBpbmNsdWRlICJzY2guYWZmaW5pdHkubm9kZUFmZmluaXR5IiAobGlzdCAuIC5zY2guY2hhcnQubm9kZUFmZmluaXR5KSB8IGluZGVudCA0IH19CiAgcmVzdGFydFBvbGljeTogTmV2ZXIKICBjb250YWluZXJzOgogICAgLSBuYW1lOiAie3sgJGZ1bGxUZXN0Q29tcE5hbWUgfX0iCiAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZS5yZXBvc2l0b3J5IH19Ont7IC5WYWx1ZXMuaW1hZ2UudGFnIH19IgogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcHJpdmlsZWdlZDogZmFsc2UKICAgICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0cnVlCiAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgIHJ1bkFzTm9uUm9vdDogdHJ1ZQogICAgICAgIHJ1bkFzVXNlcjogMTAwMCAKICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICBkcm9wOgogICAgICAgICAgLSBBTEwKICAgICAgY29tbWFuZDogWyJ3Z2V0Il0KICAgICAgYXJnczogIFsne3sgaW5jbHVkZSAic2NoLm5hbWVzLmZ1bGxDb21wTmFtZSIgKGxpc3QgLiAkY29tcE5hbWUpIH19Ont7IC5WYWx1ZXMuc2VydmljZS5wb3J0IH19JywnLU8nLCctJ10K"
        },
        {
          "name": "templates\/tests\/metrics-endpoint-test.yaml",
          "data": "IyBIZWxtIHRlc3QgLSBDaGVja3MgYWNjZXNzIHRvIHRoZSBtZXRyaWNzIGVuZHBvaW50Cnt7LSBpbmNsdWRlICJzY2guY29uZmlnLmluaXQiIChsaXN0IC4gIm5vZGVqc1NhbXBsZS5zY2guY2hhcnQuY29uZmlnLnZhbHVlcyIpIC19fQp7ey0gJGNvbXBOYW1lIDo9ICAuc2NoLmNoYXJ0LmNvbXBvbmVudHMubm9kZWpzU2FtcGxlLm5hbWUgLX19Cnt7LSAkdGVzdENvbXBOYW1lIDo9ICBwcmludGYgIiVzLSVzIiAkY29tcE5hbWUgIm1ldHJpY3MtZW5kcG9pbnQtdGVzdCIgLX19Cnt7LSAkZnVsbFRlc3RDb21wTmFtZSA6PSBpbmNsdWRlICJzY2gubmFtZXMuZnVsbENvbXBOYW1lIiAobGlzdCAuICR0ZXN0Q29tcE5hbWUpIH19CmFwaVZlcnNpb246IHYxCmtpbmQ6IFBvZAptZXRhZGF0YToKICBuYW1lOiAie3sgJGZ1bGxUZXN0Q29tcE5hbWUgfX0iCiAgYW5ub3RhdGlvbnM6CiAgICAiaGVsbS5zaC9ob29rIjogdGVzdC1zdWNjZXNzCiAgbGFiZWxzOgp7eyBpbmNsdWRlICJzY2gubWV0YWRhdGEubGFiZWxzLnN0YW5kYXJkIiAobGlzdCAuICR0ZXN0Q29tcE5hbWUpIHwgaW5kZW50IDQgfX0Kc3BlYzoKICBob3N0TmV0d29yazogZmFsc2UKICBob3N0UElEOiBmYWxzZQogIGhvc3RJUEM6IGZhbHNlCiAgc2VjdXJpdHlDb250ZXh0OgogICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICBydW5Bc1VzZXI6IDEwMDAgCiAgYWZmaW5pdHk6Cnt7LSBpbmNsdWRlICJzY2guYWZmaW5pdHkubm9kZUFmZmluaXR5IiAobGlzdCAuIC5zY2guY2hhcnQubm9kZUFmZmluaXR5KSB8IGluZGVudCA0IH19CiAgcmVzdGFydFBvbGljeTogTmV2ZXIKICBjb250YWluZXJzOgogICAgLSBuYW1lOiAie3sgJGZ1bGxUZXN0Q29tcE5hbWUgfX0iCiAgICAgIGltYWdlOiAie3sgLlZhbHVlcy5pbWFnZS5yZXBvc2l0b3J5IH19Ont7IC5WYWx1ZXMuaW1hZ2UudGFnIH19IgogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcHJpdmlsZWdlZDogZmFsc2UKICAgICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0cnVlCiAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgIHJ1bkFzTm9uUm9vdDogdHJ1ZQogICAgICAgIHJ1bkFzVXNlcjogMTAwMAogICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgIGRyb3A6CiAgICAgICAgICAtIEFMTAogICAgICBjb21tYW5kOiBbIndnZXQiXQogICAgICBhcmdzOiAgWyd7eyBpbmNsdWRlICJzY2gubmFtZXMuZnVsbENvbXBOYW1lIiAobGlzdCAuICRjb21wTmFtZSkgfX06e3sgLlZhbHVlcy5zZXJ2aWNlLnBvcnQgfX0vbWV0cmljcycsJy1PJywnLSddCg=="
        }
      ],
      "dependencies": [
        {
          "metadata": {
            "name": "sch",
            "version": "1.2.6",
            "description": "Shared Configurable Helpers (SCH)",
            "apiVersion": "v1",
            "tillerVersion": ">=2.6.0"
          },
          "templates": [
            {
              "name": "templates\/_affinity.tpl",
              "data": "e3stIC8qCmAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eSJgIGNvbnN0cmFpbiB5b3VyIHBvZCB0byBvbmx5IGJlIGFibGUgdG8gcnVuIG9uIHBhcnRpY3VsYXIgbm9kZXMKYmFzZWQgb24gc3BlY2lmaWVkIHJ1bGVzLiBTcGVjaWZ5IG9uZSBvciBib3RoIG9mIG5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZyBhbmQKbm9kZUFmZmluaXR5UHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZyB0byBzZXQgeW91ciBub2RlIGFmZmluaXR5LgoKQ2hhcnRzIHRoYXQgc3VwcG9ydCBtb3JlIHRoYW4gb25lIGFyY2hpdGVjdHVyZSBjYW4gaW5jbHVkZSB0aGUgJ2FyY2gnIHBhcmFtZXRlciBpbiB0aGVpcgp2YWx1ZXMueWFtbC4gRG9pbmcgc28gd2lsbCBvdmVycmlkZSB0aGUgZGVmYXVsdCBhZmZpbml0eSB2YWx1ZXMgc3BlY2lmaWVkIGluCl9zY2gtY2hhcnQtY29uZmlnLnlhbWwuCgpGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIGh0dHBzOi8va3ViZXJuZXRlcy5pby9kb2NzL2NvbmNlcHRzL2NvbmZpZ3VyYXRpb24vYXNzaWduLXBvZC1ub2RlLwoKTm90ZTogdGhlICdrZXknIHBhcmFtZXRlciBpbiB0aGUgY29uZmlnIHZhbHVlcyBtYXAgaXMgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byAnYmV0YS5rdWJlcm5ldGVzLmlvL2FyY2gnCmlmIG5vdCBzcGVjaWZpZWQuCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIHBhc3NlZCBhcyBhcmd1bWVudAoKX19QYXJhbWV0ZXJzIGlucHV0IGFzIGFuIGxpc3Qgb2YgdmFsdWVzOl9fCi0gdGhlIHJvb3QgY29udGV4dCAocmVxdWlyZWQpCi0gY29uZmlnIHZhbHVlcyBtYXAgb2YgYW5ub3RhdGlvbnMgKHJlcXVpcmVkKQoKX19Vc2FnZTpfXwpleGFtcGxlIGNoYXJ0IGNvbmZpZyB2YWx1ZXMuIFNlZSBfY29uZmlnLnRwbCBmb3IgdGhlIGRlZmF1bHQgdmFsdWVzIGlmIHlvdSBkbyBub3QgZGVmaW5lIHNjaC5jaGFydC5ub2RlQWZmaW5pdHkKYGBgCnt7LSBkZWZpbmUgInNjaC5jaGFydC5ub2RlQWZmaW5pdHkiIC19fQpzY2g6CiAgY2hhcnQ6CiAgICBub2RlQWZmaW5pdHk6CiAgICAgIG5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZzoKICAgICAgICBrZXk6IGJldGEua3ViZXJuZXRlcy5pby9hcmNoCiAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgdmFsdWVzOgogICAgICAgICAgLSBhbWQ2NAogICAgICAgICAgLSBwcGM2NGxlCiAgICAgICAgICAtIHMzOTB4CiAgICAgIG5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmc6CiAgICAgICAgYW1kNjQ6CiAgICAgICAgICBrZXk6IGJldGEua3ViZXJuZXRlcy5pby9hcmNoCiAgICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICAgIHdlaWdodDogMwp7ey0gZW5kIC19fQpgYGAKdXNlZCBpbiB0ZW1wbGF0ZSBhcyBmb2xsb3dzOgpgYGAKICAgICAgYW5ub3RhdGlvbnM6Cnt7LSBpbmNsdWRlICJzY2guYWZmaW5pdHkubm9kZUFmZmluaXR5IiAobGlzdCAuKSB8IGluZGVudCA4IH19CmBgYAp7ey8qIGFmZmluaXR5IC0gaHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvY29uZmlndXJhdGlvbi9hc3NpZ24tcG9kLW5vZGUvICovfX0KKi99fQoKe3stIGRlZmluZSAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eSIgLX19CiAge3stICRwYXJhbXMgOj0gLiB9fQogIHt7LSAkcm9vdCA6PSBmaXJzdCAkcGFyYW1zIH19CiAge3stICRkZWZhdWx0Um9vdCA6PSBmcm9tWWFtbCAoaW5jbHVkZSAic2NoLmNoYXJ0LmRlZmF1bHQuY29uZmlnLnZhbHVlcyIgLikgfX0KICB7ey0gJGRlZmF1bHROb2RlQWZmaW5pdHkgOj0gJGRlZmF1bHRSb290LnNjaC5jaGFydC5ub2RlQWZmaW5pdHkgfX0KICB7ey0gJG5vZGVBZmZpbml0eSA6PSAkcm9vdC5zY2guY2hhcnQubm9kZUFmZmluaXR5IHwgZGVmYXVsdCAkZGVmYXVsdE5vZGVBZmZpbml0eSB9fQpub2RlQWZmaW5pdHk6CiAge3stIGlmIChndCAobGVuICRub2RlQWZmaW5pdHkpIDApIC19fQogICAge3stIGlmIG9yIChoYXNLZXkgJG5vZGVBZmZpbml0eSAibm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nIikgKGhhc0tleSAkcm9vdC5WYWx1ZXMgImFyY2giKX19CiAge3sgaW5jbHVkZSAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZyIgKGxpc3QgJHJvb3QgJG5vZGVBZmZpbml0eSkgfX0KICAgIHt7LSBlbmQgfX0KICAgIHt7LSBpZiBvciAoaGFzS2V5ICRub2RlQWZmaW5pdHkgIm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciKSAoaGFzS2V5ICRyb290LlZhbHVlcyAiYXJjaCIpIH19CiAge3sgaW5jbHVkZSAic2NoLmFmZmluaXR5Lm5vZGVBZmZpbml0eVByZWZlcnJlZER1cmluZ1NjaGVkdWxpbmciIChsaXN0ICRyb290ICRub2RlQWZmaW5pdHkpIHwgaW5kZW50IDIgfX0KICAgIHt7LSBlbmQgfX0KICB7ey0gZW5kIH19Cnt7LSBlbmQgfX0KCnt7LSBkZWZpbmUgInNjaC5hZmZpbml0eS5ub2RlQWZmaW5pdHlSZXF1aXJlZER1cmluZ1NjaGVkdWxpbmciIC19fQogICAge3stICRwYXJhbXMgOj0gLiB9fQogICAge3stICRyb290IDo9IGZpcnN0ICRwYXJhbXMgfX0KICAgIHt7LSAkYWZmaW5pdHkgOj0gbGFzdCAkcGFyYW1zIC19fQogICAge3stICRvcGVyYXRvciA6PSAkYWZmaW5pdHkubm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nLm9wZXJhdG9yIC19fQogICAge3stICR2YWx1ZXMgOj0gJGFmZmluaXR5Lm5vZGVBZmZpbml0eVJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZy52YWx1ZXMgLX19CnJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICBub2RlU2VsZWN0b3JUZXJtczoKICAgIC0gbWF0Y2hFeHByZXNzaW9uczoKICAgICAgLSBrZXk6IHt7IGRlZmF1bHQgImJldGEua3ViZXJuZXRlcy5pby9hcmNoIiAkYWZmaW5pdHkua2V5IH19CiAgICAgICAgb3BlcmF0b3I6IHt7ICRvcGVyYXRvciB9fQogICAgICAgIHZhbHVlczoKICAgIHt7LSBpZiAkcm9vdC5WYWx1ZXMuYXJjaCAtfX0KICAgICAge3stICRhcmNoVHlwZSA6PSB0eXBlT2YgJHJvb3QuVmFsdWVzLmFyY2ggLX19CiAgICAgIHt7LSBpZiBlcSAkYXJjaFR5cGUgIm1hcFtzdHJpbmddaW50ZXJmYWNlIHt9IiAtfX0KICAgICAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9ICRyb290LlZhbHVlcy5hcmNoIH19CiAgICAgICAgLSB7eyAka2V5IH19CiAgICAgICAge3stIGVuZCAtfX0KICAgICAge3stIGVsc2UgfX0KICAgICAgICAtIHt7ICRyb290LlZhbHVlcy5hcmNoIH19CiAgICAgIHt7LSBlbmQgLX19CiAgICB7ey0gZWxzZSAtfX0KICAgIHt7LSByYW5nZSAka2V5IDo9ICR2YWx1ZXMgfX0KICAgICAgICAtIHt7ICRrZXkgfX0KICAgIHt7LSBlbmQgLX19CiAgICB7ey0gZW5kIC19fQp7ey0gZW5kIH19Cgp7ey0gZGVmaW5lICJzY2guYWZmaW5pdHkubm9kZUFmZmluaXR5UHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZyIgLX19CiAge3stICRwYXJhbXMgOj0gLiB9fQogIHt7LSAkcm9vdCA6PSBmaXJzdCAkcGFyYW1zIH19CiAge3stICRub2RlQWZmaW5pdHkgOj0gbGFzdCAkcGFyYW1zIC19fQogIHt7LSAkYWZmaW5pdHlEZWZhdWx0IDo9ICRub2RlQWZmaW5pdHkubm9kZUFmZmluaXR5UHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZyAtfX0KICB7ey0gJGFmZmluaXR5IDo9ICRyb290LlZhbHVlcy5hcmNoIHwgZGVmYXVsdCAkYWZmaW5pdHlEZWZhdWx0IC19fQogIHt7LSBpZiBub3QgJHJvb3QuVmFsdWVzLmFyY2ggfX0KICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9ICRhZmZpbml0eSB9fQpwcmVmZXJyZWREdXJpbmdTY2hlZHVsaW5nSWdub3JlZER1cmluZ0V4ZWN1dGlvbjoKICAgIHt7LSAkd2VpZ2h0IDo9ICR2YWx1ZS53ZWlnaHQgfCBpbnQ2NCB9fQogICAge3stICRvcGVyYXRvciA6PSAkdmFsdWUub3BlcmF0b3IgfX0KLSB3ZWlnaHQ6IHt7ICR3ZWlnaHQgfX0KICBwcmVmZXJlbmNlOgogICAgbWF0Y2hFeHByZXNzaW9uczoKICAgIC0ga2V5OiB7eyBkZWZhdWx0ICJiZXRhLmt1YmVybmV0ZXMuaW8vYXJjaCIgJHZhbHVlLmtleSB9fQogICAgICBvcGVyYXRvcjoge3sgZGVmYXVsdCAiSW4iICRvcGVyYXRvciB9fQogICAgICB2YWx1ZXM6CiAgICAgIC0ge3sgJGtleSB9fQogIHt7IGVuZCAtfX0KICB7ey0gZWxzZSBpZiBhbmQgKCRyb290LlZhbHVlcy5hcmNoKSAoZXEgKHR5cGVPZiAkcm9vdC5WYWx1ZXMuYXJjaCkgIm1hcFtzdHJpbmddaW50ZXJmYWNlIHt9IikgfX0KcHJlZmVycmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICB7ey0gcmFuZ2UgJGtleSwgJHZhbHVlIDo9ICRyb290LlZhbHVlcy5hcmNoIH19CiAgICB7ey0gJHNwbGl0VmFsdWUgOj0gc3BsaXQgIiAiICR2YWx1ZSB9fQotIHdlaWdodDoge3sgJHNwbGl0VmFsdWUuXzAgfX0KICBwcmVmZXJlbmNlOgogICAgbWF0Y2hFeHByZXNzaW9uczoKICAgIC0ga2V5OiAiYmV0YS5rdWJlcm5ldGVzLmlvL2FyY2giCiAgICAgIG9wZXJhdG9yOiAiSW4iCiAgICAgIHZhbHVlczoKICAgICAgLSB7eyAka2V5IH19CiAgICB7ey0gZW5kIC19fQogIHt7LSBlbmQgfX0Ke3stIGVuZCB9fQo="
            },
            {
              "name": "templates\/_config.tpl",
              "data": "e3stIC8qCkNvbmZpZyBmaWxlIGZvciBTQ0ggKFNoYXJlZCBDb25maWd1cmFibGUgSGVscGVycykKCnNjaDx4Lnkuej4vX2NvbmZpZy50cGwgaXMgdGhlIGNvbmZpZyBmaWxlIHNjaC4gSW4gYWRkaXRpb24gYSBnaXZlbgpjaGFydCBjYW4gc3BlY2lmeSBhZGRpdGlvbmFswqB2YWx1ZXMgYW5kL29yIG92ZXJyaWRlIHZhbHVlcyB2aWEgZGVmaW5lZAp5YW1sIHN0cnVjdHVyZSBwYXNzZWQgZHVyaW5nICJzY2guY29uZmlnLmluaXQnIChzZWUgYmVsb3cpLgrCoAoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoqKiogVGhpcyBmaWxlIGlzIHNoYXJlZCBhY3Jvc3MgbXVsdGlwbGUgY2hhcnRzLCBhbmQgY2hhbmdlcyBtdXN0IGJlwqAKKioqIG1hZGUgaW4gY2VudHJhbGl6ZWQgYW5kIGNvbnRyb2xsZWQgcHJvY2Vzcy7CoAoqKiogRG8gTk9UIG1vZGlmeSB0aGlzIGZpbGUgd2l0aCBjaGFydCBzcGVjaWZpYyBjaGFuZ2VzLgoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgoqLyAtfX0KCnt7LSAvKgoic2NoLmNvbmZpZy52ZXJzaW9uIiBjb250YWlucyB0aGUgdmVyc2lvbiBpbmZvcm1hdGlvbiBhbmQgdGlsbGVyVmVyc2lvbiBjb25zdHJhaW50CmZvciB0aGlzIHZlcnNpb24gb2YgdGhlIFNoYXJlZCBDb25maWd1cmFibGUgSGVscGVycy4KKi8gLX19Cnt7LSBkZWZpbmUgInNjaC5jb25maWcudmVyc2lvbiIgLX19CnZlcnNpb246ICIxLjAuMSIKdGlsbGVyVmVyc2lvbjogIj49Mi42LjAiCnJlcXVpcmVzOgogIC0gInRlbXBsYXRlcy9zY2gtMi42LjAvX3V0aWxzLnRwbCIKe3stIGVuZCAtfX0KCnt7LSAvKgoic2NoLmNvbmZpZy52YWx1ZXMiIGNvbnRhaW5zIHRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gdmFsdWVzIHVzZWQgYnkKdGhlIFNoYXJlZCBDb25maWd1cmFibGUgSGVscGVycy4KClRvIG92ZXJyaWRlIGFueSBvZiB0aGVzZSB2YWx1ZXMsIG1vZGlmeSB0aGUgdGVtcGxhdGVzL19zY2gtY2hhcnQtY29uZmlnLnRwbCBmaWxlwqAKKi8gLX19Cnt7LSBkZWZpbmUgInNjaC5jb25maWcudmFsdWVzIiAtfX0Kc2NoOgogIGNoYXJ0OgogICAgYXBwTmFtZTogIiIKICAgIGxhYmVsVHlwZTogbm9uLXByZWZpeGVkCiAgbmFtZXM6CiAgICBmdWxsTmFtZToKICAgICAgbWF4TGVuZ3RoOiA2MwogICAgICByZWxlYXNlTmFtZVRydW5jTGVuZ3RoOiA0MgogICAgICBhcHBOYW1lVHJ1bmNMZW5ndGg6IDIwCiAgICBmdWxsQ29tcE5hbWU6CiAgICAgIG1heExlbmd0aDogNjMKICAgICAgcmVsZWFzZU5hbWVUcnVuY0xlbmd0aDogMzYKICAgICAgYXBwTmFtZVRydW5jTGVuZ3RoOiAxMwogICAgICBjb21wTmFtZVRydW5jTGVuZ3RoOiAxMgogICAgc3RhdGVmdWxTZXROYW1lOgogICAgICBtYXhMZW5ndGg6IDMzCiAgICAgIHJlbGVhc2VOYW1lVHJ1bmNMZW5ndGg6IDE1CiAgICAgIGFwcE5hbWVUcnVuY0xlbmd0aDogNwogICAgICBjb21wTmFtZVRydW5jTGVuZ3RoOiA5CiAgICB2b2x1bWVDbGFpbVRlbXBsYXRlTmFtZToKICAgICAgbWF4TGVuZ3RoOiA2MwogICAgICBwb3NzaWJsZVByZWZpeDogImdsdXN0ZXJmcy1keW5hbWljLSIKICAgICAgY2xhaW1OYW1lVHJ1bmNMZW5ndGg6IDcKICAgIHBlcnNpc3RlbnRWb2x1bWVDbGFpbU5hbWU6CiAgICAgIG1heExlbmd0aDogNjMKICAgICAgcG9zc2libGVQcmVmaXg6ICJnbHVzdGVyZnMtZHluYW1pYy0iCiAgICAgIHJlbGVhc2VOYW1lVHJ1bmNMZW5ndGg6IDE4CiAgICAgIGFwcE5hbWVUcnVuY0xlbmd0aDogMTMKICAgICAgY2xhaW1OYW1lVHJ1bmNMZW5ndGg6IDEyCnt7LSBlbmQgLX19Cgp7ey0gLyoKInNjaC5jaGFydC5kZWZhdWx0LmNvbmZpZy52YWx1ZXMiIGNvbnRhaW5zIGEgZGVmYXVsdCBjb25maWd1cmF0aW9uIHZhbHVlcyB1c2VkIGJ5CnRoZSBTaGFyZWQgQ29uZmlndXJhYmxlIEhlbHBlcnMgaWYgbm90IGNoYXJ0IHNwZWNpZmljIG92ZXJyaWRlIGZpbGUgZXhpc3RzLgoKVG8gb3ZlcnJpZGUgYW55IG9mIHRoZXNlIHZhbHVlcywgbW9kaWZ5IHRoZSB0ZW1wbGF0ZXMvX3NjaC1jaGFydC1jb25maWcudHBsIGZpbGUKd2l0aCBkZWZpbmUgb2YgInNjaC5jaGFydC5jb25maWcudmFsdWVzIsKgCiovIC19fQp7ey0gZGVmaW5lICJzY2guY2hhcnQuZGVmYXVsdC5jb25maWcudmFsdWVzIiAtfX0Kc2NoOgogIGNoYXJ0OgogICAgYXBwTmFtZTogIiIKICAgIG5vZGVBZmZpbml0eToKICAgICAgbm9kZUFmZmluaXR5UmVxdWlyZWREdXJpbmdTY2hlZHVsaW5nOgogICAgICAgIGtleTogYmV0YS5rdWJlcm5ldGVzLmlvL2FyY2gKICAgICAgICBvcGVyYXRvcjogSW4KICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAtIGFtZDY0CiAgICAgICAgICAtIHBwYzY0bGUKICAgICAgICAgIC0gczM5MHgKe3stIGVuZCAtfX0KCgp7ey0gLyoKInNjaC5jb25maWcuaW5pdCIgd2lsbCBtZXJnZSB0aGUgc2NoIGNvbmZpZyBhbmQgb3ZlcnJpZGUgaW50byB0aGUgcm9vdCBjb250ZXh0IChha2EgImRvdCIsICIuIikKClVzZXM6CiAgLSAic2NoLnV0aWxzLmdldEl0ZW0iCgpQYXJhbWV0ZXJzIGlucHV0IGFzIGFuIGFycmF5IG9mIG9uZSB2YWx1ZXM6CiAgLSB0aGUgcm9vdCBjb250ZXh0IChyZXF1aXJlZCkKICAtICJzY2guY2hhcnQuY29uZmlnLnZhbHVlcyIgKG9wdGlvbmFsKSBpZiBkZWZpbmVkIGJ5IHRoZSBjaGFydCwgd2lsbCBkZWZhdWx0IHRvIHVzZSBkZWZpbmVkICJzY2guY2hhcnQuZGVmYXVsdC5jb25maWcudmFsdWVzIgoKQW55IHRlbXBsYXRlIGluIHdoaWNoIHVzZXMgc2NoIHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgYXQgdGhlIGJlZ2luIG9mIHRoZSB0ZW1wbGF0ZS4KClVzYWdlOgp7ey0gaW5jbHVkZSAic2NoLmNvbmZpZy5pbml0IiAobGlzdCAuICJzY2guY2hhcnQuY29uZmlnLnZhbHVlcyIpIC19fQpvcgp7ey0gaW5jbHVkZSAic2NoLmNvbmZpZy5pbml0IiAobGlzdCAuKSAtfX0KCiovIC19fQp7ey0gZGVmaW5lICJzY2guY29uZmlnLmluaXQiIC19fQogIHt7LSAkcGFyYW1zIDo9IC4gLX19CiAge3stICRyb290IDo9IGZpcnN0ICRwYXJhbXMgLX19CiAge3stICRzY2hDaGFydENvbmZpZ05hbWUgOj0gKGluY2x1ZGUgInNjaC51dGlscy5nZXRJdGVtIiAobGlzdCAkcGFyYW1zIDEgInNjaC5jaGFydC5kZWZhdWx0LmNvbmZpZy52YWx1ZXMiKSkgLX19CiAge3stICRzY2hDaGFydENvbmZpZyA6PSBmcm9tWWFtbCAoaW5jbHVkZSAkc2NoQ2hhcnRDb25maWdOYW1lICRyb290KSAtfX0KICB7ey0gJHNjaENvbmZpZyA6PSBmcm9tWWFtbCAoaW5jbHVkZSAic2NoLmNvbmZpZy52YWx1ZXMiICRyb290KSAtfX0KICB7ey0gaWYgbm90ICRzY2hDaGFydENvbmZpZyAtfX0KICB7ey0gZmFpbCAoY2F0ICJTY2ggaW1wb3J0IGZhaWx1cmU6IFVuYWJsZSB0byBtZXJnZSBzY2ggaW50byB2YWx1ZXMgYXMgdGhlIGRhdGEgcGFzc2VkIGlzIDxuaWw+IikgLX19CiAge3stIGVuZCAtfX0KICB7ey0gJF8gOj0gbWVyZ2UgJHJvb3QgJHNjaENoYXJ0Q29uZmlnIC19fQogIHt7LSAkXyA6PSBtZXJnZSAkcm9vdCAkc2NoQ29uZmlnIC19fQogIHt7LSAkdmFsdWVzTWV0YWRhdGEgOj0gZGljdCAidmFsdWVzTWV0YWRhdGEiIChmcm9tWWFtbCAoJHJvb3QuRmlsZXMuR2V0ICJ2YWx1ZXMtbWV0YWRhdGEueWFtbCIpKSAtfX0KICB7ey0gaW5jbHVkZSAic2NoLnZhbGlkYXRlLnZhbHVlc01ldGFkYXRhIiAobGlzdCAkdmFsdWVzTWV0YWRhdGEgIiIpIC19fQogIHt7LSAkXyA6PSBtZXJnZSAkcm9vdCAkdmFsdWVzTWV0YWRhdGEgLX19Cnt7LSBlbmQgLX19Cgp7ey0gZGVmaW5lICJzY2gudmFsaWRhdGUudmFsdWVzTWV0YWRhdGEiIC19fQp7ey0gJHZhbHVlc01ldGFkYXRhIDo9IChpbmRleCAuIDApIC19fQp7ey0gJHByZWZpeCA6PSAoaW5kZXggLiAxKSAtfX0Ke3stIHJhbmdlICRrZXksICR2YWx1ZSA6PSAkdmFsdWVzTWV0YWRhdGEgLX19CiAge3stICRmdWxsa2V5Oj0gKGxpc3QgJHByZWZpeCAka2V5IHwgam9pbiAiLiIgKSB8IHJlcGxhY2UgIi52YWx1ZXNNZXRhZGF0YS4iICIiIC19fQogICB7ey0gaWYgKGhhc1ByZWZpeCAibWFwW3N0cmluZ10iICh0eXBlT2YgJHZhbHVlKSkgLX19CiAgICAge3stIGluY2x1ZGUgInNjaC52YWxpZGF0ZS52YWx1ZXNNZXRhZGF0YSIgKGxpc3QgJHZhbHVlICRmdWxsa2V5KSAtfX0KICAge3stIGVsc2UgLX19CiAgICAge3stIGlmIGVxICh0eXBlT2YgJHZhbHVlKSAiPG5pbD4iIC19fQogICAgICAge3stIGZhaWwgKGNhdCAiVW5hYmxlIHRvIHByb2Nlc3MgdmFsdWVzLW1ldGFkYXRhLnlhbWwgYXMgdGhlIGtleSIgJGZ1bGxrZXkgImhhcyBhIHZhbHVlIG9mIDxuaWw+IikgLX19CiAgICAge3stIGVuZCAtfX0KICAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
            },
            {
              "name": "templates\/_metadata.tpl",
              "data": "e3stIC8qCm1ldGFkYXRhIGhlbHBlcnMgZm9yIFNDSCAoU2hhcmVkIENvbmZpZ3VyYWJsZSBIZWxwZXJzKQoKc2NoL19tZXRhZGF0YS50cGwgY29udGFpbnMgc2hhcmVkIGNvbmZpZ3VyYWJsZSBoZWxwZXIgdGVtcGxhdGVzIGZvcsKgCmNyZWF0aW5nIHJlc291cmNlIG1ldGFkYXRhIGxhYmVscyBhbmQgYW5ub3RhdGlvbnMuCgpVc2FnZSBvZiAic2NoLm1ldGFkYXRhLioiIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgbGluZSBiZSBpbmNsdWRlIGF0CnRoZSBiZWdpbmluZyBvZiB0ZW1wbGF0ZToKe3stIGluY2x1ZGUgInNjaC5jb25maWcuaW5pdCIgKGxpc3QgLiAic2NoLmNoYXJ0LmNvbmZpZy52YWx1ZXMiKSAtfX0KwqAKKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKioqIFRoaXMgZmlsZSBpcyBzaGFyZWQgYWNyb3NzIG11bHRpcGxlIGNoYXJ0cywgYW5kIGNoYW5nZXMgbXVzdCBiZcKgCioqKiBtYWRlIGluIGNlbnRyYWxpemVkIGFuZCBjb250cm9sbGVkIHByb2Nlc3MuwqAKKioqIERvIE5PVCBtb2RpZnkgdGhpcyBmaWxlIHdpdGggY2hhcnQgc3BlY2lmaWMgY2hhbmdlcy4KKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKi8gLX19Cgp7ey0gLyoKInNjaC5tZXRhZGF0YS52ZXJzaW9uIiBjb250YWlucyB0aGUgdmVyc2lvbiBpbmZvcm1hdGlvbiwgdGlsbGVyVmVyc2lvbiBjb25zdHJhaW50CmFuZCByZXF1aXJlZCB0cGwgZmlsZXMgZm9yIHRoaXMgdmVyc2lvbiBvZiBzY2gvX21ldGFkYXRhLnRwbAoqLyAtfX0Ke3stIGRlZmluZSAic2NoLm1ldGFkYXRhLnZlcnNpb24iIC19fQp2ZXJzaW9uOiAiMS4wLjEiCnRpbGxlclZlcnNpb246ICI+PTIuNi4wIgpyZXF1aXJlczoKICAtICJ0ZW1wbGF0ZXMvc2NoLTIuNi4wL19jb25maWcudHBsIgogIC0gInRlbXBsYXRlcy9zY2gtMi42LjAvX3V0aWxzLnRwbCIKe3stIGVuZCAtfX0KCgp7ey0gLyoKYCJzY2gubWV0YWRhdGEubGFiZWxzLnN0YW5kYXJkImAgd2lsbCBnZW5lcmF0ZSB0aGUgNCByZXF1aXJlZCBsYWJlbHMgYXBwLCBjaGFydCwKaGVyaXRhZ2UgYW5kIHJlbGVhc2UsIGFuZCB3aWxsIG9wdGlvbmFsIGNyZWF0ZSBjb21wb25lbnQgYW5kIGEgbWFwIG9mIGFkZGl0aW9uYWx5CnBhc3NlZCBsYWJlbHMuCgpOb3RlOiBLdWJlcm5ldGVzIGhhcyB1cGRhdGVkIHRoZWlyIHN0YW5kYXJkIGxhYmVsIG5hbWVzLiBUaGV5IGFyZSBub3cKYXBwLmt1YmVybmV0ZXMuaW8vbmFtZSwgaGVsbS5zaC9jaGFydCwgYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSwgYW5kCmFwcC5rdWJlcm5ldGVzLmlvL2luc3RhbmNlLiBUbyB1c2UgdGhlc2UgbmV3IHZhbHVlcywgc2V0IHRoZSBzY2guY2hhcnQubGFiZWxUeXBlCnRvIHByZWZpeGVkIGluIF9zY2gtY2hhcnQtY29uZmlnLnlhbWwuCgpfX1ZhbHVlcyBVc2VkX18KCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIGAuc2NoLmNoYXJ0LmFwcE5hbWVgCi0gYC5zY2gudXRpbHMuZ2V0SXRlbWAKCl9fUGFyYW1ldGVycyBpbnB1dCBhcyBhbiBsaXN0IG9mIHZhbHVlczpfXwotIHRoZSByb290IGNvbnRleHQgKHJlcXVpcmVkKQotIGNvbXBvbmVudCAocmVxdWlyZWQgIiIgb3IgIjxjb21wTmFtZT4pCi0gZGljdCBvZiBrZXkgdmFsdWUgcGFpcnMgZm9yIG1vcmUgbGFiZWxzCgpfX1VzYWdlOl9fCmBgYAogIGxhYmVsczoKe3sgaW5jbHVkZSAic2NoLm1ldGFkYXRhLmxhYmVscy5zdGFuZGFyZCIgKGxpc3QgLiAiIikgfCBpbmRlbnQgNCB9fSAgIyBubyBjb21wb25lbnQgbGFiZWwKb3IKICBsYWJlbHM6Cnt7IGluY2x1ZGUgInNjaC5tZXRhZGF0YS5sYWJlbHMuc3RhbmRhcmQiIChsaXN0IC4gJGNvbXBOYW1lKSB8IGluZGVudCA0IH19ICMgd2l0aCBjb21wb25lbnQgbGFiZWwKb3IKICBsYWJlbHM6Cnt7IGluY2x1ZGUgInNjaC5tZXRhZGF0YS5sYWJlbHMuc3RhbmRhcmQiIChsaXN0IC4gJGNvbXBOYW1lIChkaWN0ICJsYWJlbEEiICJBdmFsdWUiICJsYWJlbEIiICJCdmFsdWUiKSkgfCBpbmRlbnQgNCB9fSAjIHdpdGggY29tcG9uZW50IGxhYmVsIGFuZCBhZGRpdGlvbmFsIGxhYmVscwpgYGAKKi8gLX19Cnt7LSAvKgoqLyAtfX0Ke3stIGRlZmluZSAic2NoLm1ldGFkYXRhLmxhYmVscy5zdGFuZGFyZCIgLX19CiAge3stICRwYXJhbXMgOj0gLiAtfX0KICB7ey0gJHRvcCA6PSBmaXJzdCAkcGFyYW1zIC19fQogIHt7LSAkY29tcE5hbWUgOj0gKGluY2x1ZGUgInNjaC51dGlscy5nZXRJdGVtIiAobGlzdCAkcGFyYW1zIDEgIiIpKSAtfX0KICB7ey0gJGxhYmVsVHlwZSA6PSAkdG9wLnNjaC5jaGFydC5sYWJlbFR5cGUgfCBkZWZhdWx0ICJub24tcHJlZml4ZWQiIC19fQogIHt7LSBpZiBlcSAkbGFiZWxUeXBlICJub24tcHJlZml4ZWQiIC19fQphcHA6IHt7IGluY2x1ZGUgInNjaC5uYW1lcy5hcHBOYW1lIiAobGlzdCAkdG9wKSAgfCBxdW90ZX19CmNoYXJ0OiB7eyAkdG9wLkNoYXJ0Lk5hbWUgfCBxdW90ZSB9fQpoZXJpdGFnZToge3sgJHRvcC5SZWxlYXNlLlNlcnZpY2UgfCBxdW90ZSB9fQpyZWxlYXNlOiB7eyAkdG9wLlJlbGVhc2UuTmFtZSB8IHF1b3RlIH19CiAge3stIGlmICRjb21wTmFtZSB9fQpjb21wb25lbnQ6IHt7ICRjb21wTmFtZSB8IHF1b3RlIH19CiAge3stIGVuZCAtfX0KICB7ey0gZWxzZSAtfX0KYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToge3sgaW5jbHVkZSAic2NoLm5hbWVzLmFwcE5hbWUiIChsaXN0ICR0b3ApICB8IHF1b3RlfX0KaGVsbS5zaC9jaGFydDoge3sgJHRvcC5DaGFydC5OYW1lIHwgcXVvdGUgfX0KYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieToge3sgJHRvcC5SZWxlYXNlLlNlcnZpY2UgfCBxdW90ZSB9fQphcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZToge3sgJHRvcC5SZWxlYXNlLk5hbWUgfCBxdW90ZSB9fQpyZWxlYXNlOiB7eyAkdG9wLlJlbGVhc2UuTmFtZSB8IHF1b3RlIH19CiAge3stIGlmICRjb21wTmFtZSB9fQphcHAua3ViZXJuZXRlcy5pby9jb21wb25lbnQ6IHt7ICRjb21wTmFtZSB8IHF1b3RlIH19CiAge3stIGVuZCAtfX0KICB7ey0gZW5kIC19fQogIHt7LSBpZiAoZ3QgKGxlbiAkcGFyYW1zKSAyKSAtfX0KICAgIHt7LSAkbW9yZUxhYmVscyA6PSAoaW5kZXggJHBhcmFtcyAyKSAtfX0KICAgIHt7LSByYW5nZSAkaywgJHYgOj0gJG1vcmVMYWJlbHMgfX0Ke3sgJGsgfX06IHt7ICR2IHwgcXVvdGUgfX0KICAgIHt7LSBlbmQgLX19CiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0KCgp7ey0gLyoKYCJzY2gubWV0YWRhdGEuYW5ub3RhdGlvbnMubWV0ZXJpbmciYCB3aWxsIGdlbmVyYXRlIG1ldGVyaW5nIGFubm90YXRpb25zIGJhc2VkCm9uIHZhbHVlcyBwYXNzIGluLiBUaGVzZSB2YWx1ZXMgY2FuIChyZWNvbW1lbmQpIHZpYSB0aGUgc2NoIGNoYXJ0IGNvbmZpZyB2YWx1ZXMuCgoKX19Db25maWcgVmFsdWVzIFVzZWQ6X18KLSBwYXNzZWQgYXMgYXJndW1lbnQKCl9fUGFyYW1ldGVycyBpbnB1dCBhcyBhbiBsaXN0IG9mIHZhbHVlczpfXwotIHRoZSByb290IGNvbnRleHQgKHJlcXVpcmVkKQotIGNvbmZpZyB2YWx1ZXMgbWFwIG9mIGFubm90YXRpb25zIChyZXF1aXJlZCkKCl9fVXNhZ2U6X18KZXhhbXBsZSBjaGFydCBjb25maWcgdmFsdWVzCmBgYAp7ey0gZGVmaW5lICJzY2guY2hhcnQuY29uZmlnLnZhbHVlcyIgLX19CnNjaDoKICBjaGFydDoKICAgIGFwcE5hbWU6ICJyZWZBcHAiCiAgICBkZXBsb3ltZW50TmFtZTogImRlcGxveW1lbnQzIgogICAgbWV0ZXJpbmc6CiAgICAgIHByb2R1Y3ROYW1lOiAiUmVmZXJlbmNlIFByb2R1Y3QiCiAgICAgIHByb2R1Y3RJRDogImZiZjZhOTZkNDkyMTRjMGFiYzZhM2JjNWRhNmU0OGNkIgogICAgICBwcm9kdWN0VmVyc2lvbjogIjEuMC4wLjAiCnt7LSBlbmQgLX19CmBgYAp1c2VkIGluIHRlbXBsYXRlIGFzIGZvbGxvd3M6CmBgYAogICAgICBhbm5vdGF0aW9uczoKe3stIGluY2x1ZGUgInNjaC5tZXRhZGF0YS5hbm5vdGF0aW9ucy5tZXRlcmluZyIgKGxpc3QgLiAuc2NoLmNoYXJ0Lm1ldGVyaW5nKSB8IGluZGVudCA4IH19CmBgYAoqLyAtfX0Ke3stIC8qCiovIC19fQp7ey0gZGVmaW5lICJzY2gubWV0YWRhdGEuYW5ub3RhdGlvbnMubWV0ZXJpbmciIC19fQogIHt7LSAkcGFyYW1zIDo9IC4gLX19CiAge3stICR0b3AgOj0gZmlyc3QgJHBhcmFtcyAtfX0KICB7ey0gaWYgKGd0IChsZW4gJHBhcmFtcykgMSkgLX19CiAgICB7ey0gJG1ldGVyaW5nIDo9IChpbmRleCAkcGFyYW1zIDEpIC19fQp7ey0gLyp7eyB0b1lhbWwgJG1ldGVyaW5nIH19Ki8gLX19CiAgICB7ey0gcmFuZ2UgJGssICR2IDo9ICRtZXRlcmluZyB9fQp7eyAkayB9fToge3sgJHYgfCBxdW90ZSB9fQogICAge3stIGVuZCAtfX0KCiAge3stIGVuZCAtfX0Ke3stIGVuZCAtfX0K"
            },
            {
              "name": "templates\/_names.tpl",
              "data": ""
            },
            {
              "name": "templates\/_utils.tpl",
              "data": "e3stIC8qCk5hbWUgaGVscGVycyBmb3IgU0NIIChTaGFyZWQgQ29uZmlndXJhYmxlIEhlbHBlcnMpCgpzY2gvX25hbWVzLnRwbCBjb250YWlucyBzaGFyZWQgY29uZmlndXJhYmxlIGhlbHBlciB0ZW1wbGF0ZXMgZm9ywqAKY3JlYXRpbmcgcmVzb3VyY2UgbmFtZXMuCgpVc2FnZSBvZiAic2NoLm5hbWVzLioiIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgbGluZSBiZSBpbmNsdWRlIGF0IAp0aGUgYmVnaW5pbmcgb2YgdGVtcGxhdGU6Cnt7LSBpbmNsdWRlICJzY2guY29uZmlnLmluaXQiIChsaXN0IC4gInNjaC5jaGFydC5jb25maWcudmFsdWVzIikgLX19CsKgCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCioqKiBUaGlzIGZpbGUgaXMgc2hhcmVkIGFjcm9zcyBtdWx0aXBsZSBjaGFydHMsIGFuZCBjaGFuZ2VzIG11c3QgYmXCoAoqKiogbWFkZSBpbiBjZW50cmFsaXplZCBhbmQgY29udHJvbGxlZCBwcm9jZXNzLsKgCioqKiBEbyBOT1QgbW9kaWZ5IHRoaXMgZmlsZSB3aXRoIGNoYXJ0IHNwZWNpZmljIGNoYW5nZXMuCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiovIC19fQoKe3stIC8qCiJzY2gubmFtZXMudmVyc2lvbiIgY29udGFpbnMgdGhlIHZlcnNpb24gaW5mb3JtYXRpb24sIHRpbGxlclZlcnNpb24gY29uc3RyYWludAphbmQgcmVxdWlyZWQgdHBsIGZpbGVzIGZvciB0aGlzIHZlcnNpb24gb2Ygc2NoL19uYW1lcy50cGwKKi8gLX19Cnt7LSBkZWZpbmUgInNjaC51dGlscy52ZXJzaW9uIiAtfX0KdmVyc2lvbjogIjEuMC4wIgp0aWxsZXJWZXJzaW9uOiAiPj0yLjYuMCIKcmVxdWlyZXM6Cnt7LSBlbmQgLX19Cgp7ey8qCiJzY2gudXRpbHMudHJ1bmNVbmlxdWUiIGlzIGEgc2hhcmVkIGhlbHBlciB3aGljaCB0YWtlcyBhIHN0cmluZyBhbmQgdHJ1bmNhdGVzCml0IHRvIGEgc3BlY2lmaWVkIGxlbmd0aCwgbWFraW5nIHRoZSBsYXN0IHBhcnQgInNvbWV3aGF0IHJhbmRvbSIgd2l0aCBhIHNwZWNpZmllZMKgCmFtb3VudCBvZiBjaGFyYWN0ZXIgc3VmZml4IGJhc2VkIG9mIHRoZSBzaGEyNTYgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcuCgpDb25maWcgVmFsdWVzIFVzZWQ6IE5BCiAgClVzZXM6IE5BCiAgICAKUGFyYW1ldGVycyBpbnB1dCBhIGRpY3Q6CiAgLSBhIGRpY3Qgd2l0aCB3aXRoIGZpZWxkcyAocmVxdWlyZWQpCiAgICAtIHRleHQgKHJlcXVpcmVkKQogICAgLSBsZW5ndGggKHJlcXVpcmVkKQogICAgLSB1bmlxdWUgKG9wdGlvbmFsKQoKVXNhZ2U6CiAgICAgIHt7LSAkdHJ1bmNVbmlxdWVQYXJtcyA6PSBkaWN0ICJ0ZXh0IiAkZWxlbWVudC5uYW1lICJsZW5ndGgiICRlbGVtZW50Lmxlbmd0aCAidW5pcXVlIiAoZGVmYXVsdCA0ICRlbGVtZW50LnVuaXF1ZSkgLX19CiAgICAgIHt7LSBwcmludGYgIiVzIiAoaW5jbHVkZSAic2NoLnV0aWxzLnRydW5jVW5pcXVlIiAkdHJ1bmNVbmlxdWVQYXJtcyB8IHRyaW1TdWZmaXggIi0iKSAtfX0KIAoqL319Cnt7LSBkZWZpbmUgInNjaC51dGlscy50cnVuY1VuaXF1ZSIgLX19CiAge3stICRwYXJtcyA6PSAuIC19fQogIHt7LSAkdG90YWxMZW5ndGggOj0gbGVuICRwYXJtcy50ZXh0IC19fQogIHt7LSAkdW5pcXVlU2l6ZSA6PSBhZGQgMSAobWluIChkZWZhdWx0IDQgJHBhcm1zLnVuaXF1ZSkgKGludCAoc3ViICRwYXJtcy5sZW5ndGggMSkpKSAtfX0KICB7ey0gaWYgKGd0IChpbnQgJHRvdGFsTGVuZ3RoKSAoaW50ICRwYXJtcy5sZW5ndGgpKSAtfX0KICAgIHt7LSAkcHJlZml4TGVuZ3RoIDo9IGludCAoc3ViICRwYXJtcy5sZW5ndGggJHVuaXF1ZVNpemUpIC19fQogICAge3stICRwcmVmaXggOj0gc3Vic3RyIDAgJHByZWZpeExlbmd0aCAkcGFybXMudGV4dCAtfX0KICAgIHt7LSAkZGlzY2FyZCA6PSBzdWJzdHIgJHByZWZpeExlbmd0aCAkdG90YWxMZW5ndGggJHBhcm1zLnRleHQgLX19CiAgICB7ey0gJHVuaXF1ZVN1ZmZpeCA6PSAkZGlzY2FyZCB8IHNoYTI1NnN1bSB8IHRydW5jIChpbnQgKHN1YiAkdW5pcXVlU2l6ZSAxKSkgLX19CiAgICB7ey0gJHJlc3VsdCA6PSBjYXQgJHByZWZpeCAiLSIgJHVuaXF1ZVN1ZmZpeCB8IHJlcGxhY2UgIiAiICIiIC19fSAgCiAgICB7ey0gJHJlc3VsdCAtfX0KICB7ey0gZWxzZSAtfX0KICAgIHt7LSAkcGFybXMudGV4dCAtfX0KICB7ey0gZW5kIC19fQp7ey0gZW5kIC19fQoKCnt7LyoKInNjaC51dGlscy53aXRoaW5MZW5ndGgiIGlzIGEgc2hhcmVkIGhlbHBlciB3aGljaCB0YWtlcyBhIHN0cmluZyBhbmQgYSBsZW5ndGguCmlmIHRoZSB0aGUgc3RyaW5nIGZpdHMgd2l0aGluIHRoZSBsZW5ndGggaXQgaXMgZ2VuZXJhdGVkLCBlbHNlIG5vdCB0ZXh0IGlzIApnZW5lcmF0ZWQuCgpDb25maWcgVmFsdWVzIFVzZWQ6IE5BCiAgClVzZXM6IE5BCiAgICAKUGFyYW1ldGVycyBpbnB1dCBhcyBhbiBhcnJheSBvZiBvbmUgdmFsdWVzOgogIC0gdGhlIHJvb3QgY29udGV4dCAocmVxdWlyZWQpCiAgLSB0aGUgdGV4dCB0byB0ZXN0IChyZXF1aXJlZCkKICAtIHRoZSBsZW5ndGggdG8gdGVzdCAocmVxdWlyZWQpCgpVc2FnZToKICB7ey0gJGxlbmd0aFRlc3RSZXN1bHQgOj0gIGluY2x1ZGUgInNjaC51dGlscy53aXRoaW5MZW5ndGgiIChsaXN0ICRyb290ICJzb21ldGV4dCIgNCkgLX19CiAKKi99fQp7ey0gZGVmaW5lICJzY2gudXRpbHMud2l0aGluTGVuZ3RoIiAtfX0KICB7ey0gJHBhcmFtcyA6PSAuIC19fQogIHt7LSAkcm9vdCA6PSBmaXJzdCAkcGFyYW1zIC19fQogIHt7LSAkdGV4dCA6PSAoaW5kZXggJHBhcmFtcyAxKSAtfX0KICB7ey0gJGxlbmd0aCA6PSAoaW5kZXggJHBhcmFtcyAyKSAtfX0KICB7ey0gaWYgKG5vdCAoZ3QgKGxlbiAkdGV4dCkgKGludCAkbGVuZ3RoKSkpIC19fQogICAge3stICR0ZXh0IC19fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19CgoKe3svKgoic2NoLnV0aWxzLmdldEl0ZW0iIGlzIGEgc2hhcmVkIGhlbHBlciB0byBnZXQgYW4gaXRlbSBiYXNlZCBvbiB0aGUgaW5kZXggaW4gdGhlIApsaXN0IGFuZCBkZWZhdWx0IHZhbHVlIGlmIHRoZSBpdGVtIGRvZXMgbm90IGV4aXN0LiBJZiB0aGUgaXRlbSBleGlzdHMsIGl0cyB0ZXh0IGlzIApnZW5lcmF0ZWQsIGlmIHRoZSBpbmRleCBpcyBvdXQgb2YgcmFuZ2Ugb2YgdGhlIGxpc3QsIHRoZW4gdGhlIGRlZmF1bHQgdGV4dCBpcyBnZW5lcmF0ZWQuCgpDb25maWcgVmFsdWVzIFVzZWQ6IE5BCiAgClVzZXM6IE5BCiAgICAKUGFyYW1ldGVycyBpbnB1dCBhcyBhbiBhcnJheSBvZiBvbmUgdmFsdWVzOgogIC0gYSBsaXN0IG9mIGl0ZW1zIChyZXF1aXJlZCkKICAtIHRoZSBpbmRleCBvZiB0aGUgbGlzdCAocmVxdWlyZWQpCiAgLSB0aGUgZGVmYXVsdCB0ZXh0IChyZXF1aXJlZCkKClVzYWdlOgogIHt7LSAkcGFyYW0xIDo9IChpbmNsdWRlICJzY2gudXRpbHMuZ2V0SXRlbSIgKGxpc3QgJHBhcmFtcyAxICJkZWZhdWx0VmFsdWUiKSkgLX19CiAKKi99fQp7ey0gZGVmaW5lICJzY2gudXRpbHMuZ2V0SXRlbSIgLX19CiAge3stICRwYXJhbXMgOj0gLiAtfX0KICB7ey0gJGxpc3QgOj0gZmlyc3QgJHBhcmFtcyAtfX0KICB7ey0gJGluZGV4IDo9IChpbmRleCAkcGFyYW1zIDEpIC19fQogIHt7LSAkZGVmYXVsdCA6PSAoaW5kZXggJHBhcmFtcyAyKSAtfX0KICB7ey0gaWYgKGd0IChhZGQgJGluZGV4IDEpIChsZW4gJGxpc3QpICkgLX19CiAgICB7ey0gJGRlZmF1bHQgLX19CiAge3stIGVsc2UgLX19CiAgICB7ey0gaW5kZXggJGxpc3QgJGluZGV4IC19fQogIHt7LSBlbmQgLX19Cnt7LSBlbmQgLX19CgoKCgo="
            },
            {
              "name": "templates\/_version.tpl",
              "data": "e3stIC8qCkNvbmZpZyBmaWxlIGZvciBTQ0ggKFNoYXJlZCBDb25maWd1cmFibGUgSGVscGVycykKCnNjaC9fdmVyc2lvbi50cGwgY29udGFpbnMgdGhlIHZlcnNpb24gaW5mb3JtYXRpb24gYW5kIHRpbGxlclZlcnNpb24KY29uc3RyYWludCBmb3IgdGhpcyB2ZXJzaW9uIG9mIHRoZSBTaGFyZWQgQ29uZmlndXJhYmxlIEhlbHBlcnMuCsKgCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCioqKiBUaGlzIGZpbGUgaXMgc2hhcmVkIGFjcm9zcyBtdWx0aXBsZSBjaGFydHMsIGFuZCBjaGFuZ2VzIG11c3QgYmXCoAoqKiogbWFkZSBpbiBjZW50cmFsaXplZCBhbmQgY29udHJvbGxlZCBwcm9jZXNzLsKgCioqKiBEbyBOT1QgbW9kaWZ5IHRoaXMgZmlsZSB3aXRoIGNoYXJ0IHNwZWNpZmljIGNoYW5nZXMuCioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiovIC19fQoKe3stIC8qCiJzY2gudmVyc2lvbiIgY29udGFpbnMgdGhlIHZlcnNpb24gaW5mb3JtYXRpb24gYW5kIHRpbGxlclZlcnNpb24gY29uc3RyYWludApmb3IgdGhpcyB2ZXJzaW9uIG9mIHRoZSBTaGFyZWQgQ29uZmlndXJhYmxlIEhlbHBlcnMuCiovIC19fQp7ey0gZGVmaW5lICJzY2gudmVyc2lvbiIgLX19CnZlcnNpb246ICIxLjIuMiIKdGlsbGVyVmVyc2lvbjogIj49Mi42LjAiCnt7LSBlbmQgLX19"
            }
          ],
          "files": [
            {
              "type_url": ".helmignore",
              "value": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oKY3YtdGVzdHMvCnBwYS1zcGVjcy8K"
            },
            {
              "type_url": "README.md",
              "value": "IyAiU2hhcmVkIENvbmZpZ3VyYWJsZSBIZWxwZXJzIiAocmVmZXJyZWQgdG8gU0NIKQoqIEEgY2hhcnQgb2YgY29tbW9uIGhlbHBlcnMgdG8gYmUgdXNlZCBhcyBhIHN1YiBjaGFydCBieSBwcm9kdWN0IGNvbnRlbnQgdGVhbXMKaW4gdGhlaXIgcHJvZHVjdCBjaGFydC4KCiMjIEludHJvZHVjdGlvbgpUaGUgZ29hbCBpcyB0byBoYXZlIHRoZSBjb21tdW5pdHkgb2YgcHJvZHVjdCBjb250ZW50IHRlYW1zIGNvbnRyaWJ1dGUgYW5kIGRldmVsb3AKYSBwYWNrYWdlIG9mICJTaGFyZWQgQ29uZmlndXJhYmxlIEhlbHBlcnMiIChyZWZlcnJlZCB0byBTQ0gpIGFzIGEgc2hhcmFibGUgcGFja2FnZQpvZiBoZWxwZXIgdGVtcGxhdGVzIHdoaWNoIGFyZSBjb25maWd1cmFibGUgYW5kIHJldXNhYmxlIGJ5IHZhcmlvdXMgcHJvZHVjdApjb250ZW50IHRlYW1zIGluIHRoZWlyIHByb2R1Y3QgY2hhcnQgdGVtcGxhdGVzLgoKIyMgQ2hhcnQgRGV0YWlscwoqIFRoaXMgY2hhcnQgZG9lcyBub3QgaW5zdGFsbCBhbnkga3ViZXJuZXRlcyByZXNvdXJjZXMgZGlyZWN0bHkuCgojIyBEb2N1bWVudGF0aW9uCgojIyMgSGVscGVycwoKPCEtLSBUT0MgZGVwdGhGcm9tOjEgZGVwdGhUbzo2IHdpdGhMaW5rczoxIHVwZGF0ZU9uU2F2ZToxIG9yZGVyZWRMaXN0OjAgLS0+Ci0gW05hbWluZ10oI25hbWluZykKLSBbTWV0YWRhdGFdKCNtZXRhZGF0YSkKLSBbQWZmaW5pdHldKCNhZmZpbml0eSkKPCEtLSAvVE9DIC0tPgoKIyMjIE5hbWluZwpTQ0ggaGVscGVycyBmb3IgbmFtaW5nIGFyZSBkZWZpbmVkIGluIGB0ZW1wbGF0ZXMvX25hbWVzLnRwbGAgYW5kIGFyZSB1c2VmdWwgZm9yIGNvbmZpZ3VyZQpyZXNvdXJjZSBhbmQga3ViZXJuZXRlcyBvYmplY3QgbmFtZXMuCgpUaGUgZm9sbG93aW5nIGFyZSB1c2VmdWwgbmFtZSB0ZW1wbGF0ZXM6Cgo8IS0tIFRPQyBkZXB0aEZyb206MSBkZXB0aFRvOjYgd2l0aExpbmtzOjEgdXBkYXRlT25TYXZlOjEgb3JkZXJlZExpc3Q6MCAtLT4KLSBbYCJzY2gubmFtZXMuYXBwTmFtZSJgXSgjYXBwTmFtZSkKLSBbYCJzY2gubmFtZXMuZnVsbE5hbWUiYF0oI2Z1bGxOYW1lKQotIFtgInNjaC5uYW1lcy5mdWxsQ29tcE5hbWUiYF0oI2Z1bGxDb21wTmFtZSkKLSBbYCJzY2gubmFtZXMuc3RhdGVmdWxTZXROYW1lImBdKCNzdGF0ZWZ1bFNldE5hbWUpCi0gW2Aic2NoLm5hbWVzLnZvbHVtZUNsYWltVGVtcGxhdGVOYW1lImBdKCN2b2x1bWVDbGFpbVRlbXBsYXRlTmFtZSkKLSBbYCJzY2gubmFtZXMucGVyc2lzdGVudFZvbHVtZUNsYWltTmFtZSJgXSgjcGVyc2lzdGVudFZvbHVtZUNsYWltTmFtZSkKPCEtLSAvVE9DIC0tPgoKIyMjIyBhcHBOYW1lCgpgInNjaC5uYW1lcy5hcHBOYW1lImAgd2lsbCBnZW5lcmF0ZSBhIGFwcCBuYW1lIGJhc2VkIG9uIHRoZSBwcmVjZWRlbmNlIGFuZCBleGlzdGVuY2XCoApvZiBgLlZhbHVlcy5uYW1lT3ZlcnJpZGVgLCBgLnNjaC5jaGFydC5hcHBOYW1lYCwgYC5zY2guY2hhcnQuc2hvcnROYW1lYCwgYC5DaGFydC5OYW1lYC4KCl9fVmFsdWVzIFVzZWRfXwotIGAuVmFsdWVzLm5hbWVPdmVycmlkZWAKLSBgLkNoYXJ0Lk5hbWVgCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIGAuc2NoLmNoYXJ0LmFwcE5hbWVgCi0gYC5zY2guY2hhcnQuc2hvcnROYW1lYAoKX19QYXJhbWV0ZXJzIGlucHV0IGFzIGFuIGxpc3Qgb2YgdmFsdWVzOl9fCi0gdGhlIHJvb3QgY29udGV4dCAocmVxdWlyZWQpCgpfX1ByZWNlZGVuY2UgaXMgdGhlIGZvbGxvd2luZzpfXwoxKSBgLlZhbHVlcy5uYW1lT3ZlcnJpZGVgCjIpIGAuc2NoLmNoYXJ0LmFwcE5hbWVgCjMpIGAuc2NoLmNoYXJ0LnNob3J0TmFtZWAKNCkgYC5DaGFydC5OYW1lYAoKX19Vc2FnZTpfXwpgYGAKwqAgYXBwOiB7eyBpbmNsdWRlICJzY2gubmFtZXMuYXBwTmFtZSIgKGxpc3QgLikgfX0KYGBgCgojIyMjIGZ1bGxOYW1lCmAic2NoLm5hbWVzLmZ1bGxOYW1lImAgd2lsbCBnZW5lcmF0ZSBhIGZ1bGxOYW1lIG1hZGUgdXAgb2YgYC5SZWxlYXNlLm5hbWVgIGFuZCBhcHBOYW1lLAppdCB3aWxsIHRydW5jYXRlIHRoZSBuYW1lIHBhcnRzIGJhc2VkIG9uIHZhbHVlcyBkZWZpbmVkIGluIGBzY2gubmFtZXMuZnVsbE5hbWUuKmAuCgpXaGVuIG5hbWUgcGFydHMgYXJlIHRydW5jYXRlZCwgYSAic29tZXdoYXQgcmFuZG9tIiA0IGNoYXJhY3RlciBzdWZmaXggaXMgdXNlZCBmb3IKZWFjaCBwYXJ0LCB3aGljaCBpcyB0aGUgZmlyc3QgNCBjaGFyYWN0ZXJzIG9mIHRoZSBzaGEyNTYgb3IgdGhlIHRydW5jYXRlZCBzdHJpbmcuCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIGAuc2NoLm5hbWVzLmZ1bGxOYW1lLm1heExlbmd0aGAKLSBgLnNjaC5uYW1lcy5mdWxsTmFtZS5yZWxlYXNlTmFtZVRydW5jTGVuZ3RoYAotIGAuc2NoLm5hbWVzLmZ1bGxOYW1lLmFwcE5hbWVUcnVuY0xlbmd0aGAKCl9fVXNlczpfXwotIGAic2NoLnV0aWxzLmdldEl0ZW0iYAotIGAic2NoLm5hbWVzLnJlbGVhc2VBcHBDb21wTmFtZSJgCgpfX1BhcmFtZXRlcnMgaW5wdXQgYXMgYSBsaXN0IG9mIHZhbHVlczpfXwotIHRoZSByb290IGNvbnRleHQgKHJlcXVpcmVkKQoKX19Vc2FnZTpfXwpgYGAKICBuYW1lOiB7eyBpbmNsdWRlICJzY2gubmFtZXMuZnVsbE5hbWUiIChsaXN0IC4pIH19CiAgb3IKICBuYW1lOiB7eyBpbmNsdWRlICJzY2gubmFtZXMuZnVsbE5hbWUiIChsaXN0IC4gNTQpIH19CmBgYAoKIyMjIyBmdWxsQ29tcE5hbWUKYCJzY2gubmFtZXMuZnVsbENvbXBOYW1lImAgd2lsbCBnZW5lcmF0ZSBhIGNvbXBOYW1lIG1hZGUgdXAgb2YgYC5SZWxlYXNlLm5hbWVgLCBhcHBOYW1lwqAKYW5kIGlmIHNwZWNpZmllZCBhbiBvcHRpb25hbCBjb21wb25lbnQgbmFtZSwgaXQgd2lsbCB0cnVuY2F0ZSB0aGUgbmFtZSBwYXJ0cwpiYXNlZCBvbiB2YWx1ZXMgZGVmaW5lZCBpbiBgc2NoLm5hbWVzLmZ1bGxDb21wTmFtZS4qYC4KCldoZW4gbmFtZSBwYXJ0cyBhcmUgdHJ1bmNhdGVkLCBhICJzb21ld2hhdCByYW5kb20iIDQgZGlnaXQgc3VmZml4IGlzIHVzZWQgZm9yIGVhY2gKcGFydCwgd2hpY2ggaXMgdGhlIGZpcnN0IDQgY2hhcmFjdGVycyBvZiB0aGUgc2hhMjU2IG9yIHRoZSB0cnVuY2F0ZWQgc3RyaW5nLsKgCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIGAuc2NoLm5hbWVzLmZ1bGxDb21wTmFtZS5tYXhMZW5ndGhgCi0gYC5zY2gubmFtZXMuZnVsbENvbXBOYW1lLnJlbGVhc2VOYW1lVHJ1bmNMZW5ndGhgCi0gYC5zY2gubmFtZXMuZnVsbENvbXBOYW1lLmFwcE5hbWVUcnVuY0xlbmd0aGAKLSBgLnNjaC5uYW1lcy5mdWxsQ29tcE5hbWUuY29tcE5hbWVUcnVuY0xlbmd0aGAKCl9fVXNlczpfXwotIGAic2NoLnV0aWxzLmdldEl0ZW0iYAotIGAic2NoLm5hbWVzLnJlbGVhc2VBcHBDb21wTmFtZSJgCgpfX1BhcmFtZXRlcnMgaW5wdXQgYXMgYSBsaXN0IG9mIHZhbHVlczpfXwotIHRoZSByb290IGNvbnRleHQgKHJlcXVpcmVkKQotIGNvbXBvbmVudCBuYW1lIChvcHRpb25hbCkKCl9fVXNhZ2U6X1\/CoApgYGAKwqAgbmFtZToge3sgaW5jbHVkZSAic2NoLm5hbWVzLmZ1bGxDb21wTmFtZSIgKGxpc3QgLikgfX0KwqAgb3IKwqAgY29tcE5hbWU6IHt7IGluY2x1ZGUgInNjaC5uYW1lcy5mdWxsQ29tcE5hbWUiIChsaXN0IC4gJGNvbXBOYW1lKSB9fQpgYGAKCiMjIyMgc3RhdGVmdWxTZXROYW1lCmAic2NoLm5hbWVzLnN0YXRlZnVsU2V0TmFtZSJgIHdpbGwgZ2VuZXJhdGUgYSBzdGF0ZWZ1bFNldCBuYW1lIG1hZGUgdXAgb2bCoApyZWxlYXNlIG5hbWUsIGFwcE5hbWUgYW5kIGlmIHNwZWNpZmllZMKgYW4gb3B0aW9uYWwgY29tcG9uZW50IG5hbWUsIGl0IHdpbGzCoAp0cnVuY2F0ZSB0aGUgbmFtZSBwYXJ0cyBiYXNlZCBvbiB2YWx1ZXMgZGVmaW5lZCBpbiBgc2NoLm5hbWVzLnN0YXRlZnVsU2V0TmFtZS4qYC4KCldoZW4gbmFtZSBwYXJ0cyBhcmUgdHJ1bmNhdGVkLCBhICJzb21ld2hhdCByYW5kb20iIDQgY2hhcmFjdGVyIHN1ZmZpeCBpcyB1c2VkCmZvciBlYWNoIHBhcnQsIHdoaWNoIGlzIHRoZSBmaXJzdCA0IGNoYXJhY3RlcnMgb2YgdGhlIHNoYTI1NiBvciB0aGUgdHJ1bmNhdGVkIHN0cmluZy4KCkJlY2F1c2Ugc3RhdGVmdWxTZXQgY2FuIGhhdmUgVm9sdW1lQ2xhaW1UZW1wbGF0ZXMsIGFuZCBpZiB0aGF0IFZvbHVtZUNsYWltVGVtcGxhdGVzIGdlbmVyYXRlcyBhIGR5bmFtaWMgUFYgd2l0aCBhIHN0b3JhZ2UgY2xhc3Mgc3VjaCBhcyBHbHVzdGVyRlMsIGl0IGNvdWxkIHJlc3VsdCBpbsKgZ2VuZXJhdGluZyBhIHNlcnZpY2Ugd2l0aCBhIG5hbWUgY29udGFpbmluZyB0aGUgc3RhdGVmdWxTZXQgbmFtZTsgdGhlcmVmb3JlLCB0aGVyZcKgbWF5IGJlIGNhc2VzIGluIHdoaWNoIHRoZSBzdGF0ZWZ1bFNldCBuYW1lIG5lZWRzIHRvIGJlIHRydW5jYXRlZCBiYXNlZCBvbiB0aGUgZGVmYXVsdMKgb3IgY2hhcnQgc3BlY2lmaWVkIGNvbmZpZ3VyYXRpb24uCgpfX0NvbmZpZyBWYWx1ZXMgVXNlZDpfXwotIGAuc2NoLm5hbWVzLnN0YXRlZnVsU2V0TmFtZS5tYXhMZW5ndGhgCi0gYC5zY2gubmFtZXMuc3RhdGVmdWxTZXROYW1lLnJlbGVhc2VOYW1lVHJ1bmNMZW5ndGhgCi0gYC5zY2gubmFtZXMuc3RhdGVmdWxTZXROYW1lLmFwcE5hbWVUcnVuY0xlbmd0aGAKLSBgLnNjaC5uYW1lcy5zdGF0ZWZ1bFNldE5hbWUuY29tcE5hbWVUcnVuY0xlbmd0aGAKCl9fVXNlczpfXwotIGAic2NoLnV0aWxzLmdldEl0ZW0iYAotIGAic2NoLm5hbWVzLnJlbGVhc2VBcHBDb21wTmFtZSJgCgpfX1BhcmFtZXRlcnMgaW5wdXQgYXMgYSBsaXN0IG9mIHZhbHVlczpfXwotIHRoZSByb290IGNvbnRleHQgKHJlcXVpcmVkKQotIGNvbXBvbmVudCBuYW1lIChvcHRpb25hbCkKCl9fVXNhZ2U6X1\"
            }
          ]
        }
      ],
      "values": {
        "raw": "arch:\n  amd64: 2 - No preference\n  ppc64le: 2 - No preference\n  s390x: 2 - No preference\nautoscaling:\n  enabled: false\n  maxReplicas: 2\n  metrics:\n    cpu:\n      targetAverageUtilization: 100m\n  minReplicas: 1\nimage:\n  pullPolicy: Always\n  repository: ibmcom\/icp-nodejs-sample\n  tag: 10\nlivenessProbe:\n  initialDelaySeconds: 30\n  periodSeconds: 10\nresources:\n  limits:\n    cpu: 100m\n    memory: 128Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\nsch:\n  global: {}\nservice:\n  port: 3000\n  type: NodePort\n"
      },
      "files": [
        {
          "type_url": ".helmignore",
          "value": "IyBQYXR0ZXJucyB0byBpZ25vcmUgd2hlbiBidWlsZGluZyBwYWNrYWdlcy4KIyBUaGlzIHN1cHBvcnRzIHNoZWxsIGdsb2IgbWF0Y2hpbmcsIHJlbGF0aXZlIHBhdGggbWF0Y2hpbmcsIGFuZAojIG5lZ2F0aW9uIChwcmVmaXhlZCB3aXRoICEpLiBPbmx5IG9uZSBwYXR0ZXJuIHBlciBsaW5lLgouRFNfU3RvcmUKIyBDb21tb24gVkNTIGRpcnMKLmdpdC8KLmdpdGlnbm9yZQouYnpyLwouYnpyaWdub3JlCi5oZy8KLmhnaWdub3JlCi5zdm4vCiMgQ29tbW9uIGJhY2t1cCBmaWxlcwoqLnN3cAoqLmJhawoqLnRtcAoqfgojIFZhcmlvdXMgSURFcwoucHJvamVjdAouaWRlYS8KKi50bXByb2oKY3YtdGVzdHMvCnBwYS1zcGVjcy8KCnRlc3QtY2hhcnQuc2g="
        },
        {
          "type_url": "LICENSE",
          "value": "Q29weXJpZ2h0IChjKSAyMDE4IElCTSBDb3Jwb3JhdGlvbgoKQXBhY2hlIExpY2Vuc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVyc2lvbiAyLjAsIEphbnVhcnkgMjAwNAogICAgICAgICAgICAgICAgICAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvCgogICBURVJNUyBBTkQgQ09ORElUSU9OUyBGT1IgVVNFLCBSRVBST0RVQ1RJT04sIEFORCBESVNUUklCVVRJT04KCiAgIDEuIERlZmluaXRpb25zLgoKICAgICAgIkxpY2Vuc2UiIHNoYWxsIG1lYW4gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGZvciB1c2UsIHJlcHJvZHVjdGlvbiwKICAgICAgYW5kIGRpc3RyaWJ1dGlvbiBhcyBkZWZpbmVkIGJ5IFNlY3Rpb25zIDEgdGhyb3VnaCA5IG9mIHRoaXMgZG9jdW1lbnQuCgogICAgICAiTGljZW5zb3IiIHNoYWxsIG1lYW4gdGhlIGNvcHlyaWdodCBvd25lciBvciBlbnRpdHkgYXV0aG9yaXplZCBieQogICAgICB0aGUgY29weXJpZ2h0IG93bmVyIHRoYXQgaXMgZ3JhbnRpbmcgdGhlIExpY2Vuc2UuCgogICAgICAiTGVnYWwgRW50aXR5IiBzaGFsbCBtZWFuIHRoZSB1bmlvbiBvZiB0aGUgYWN0aW5nIGVudGl0eSBhbmQgYWxsCiAgICAgIG90aGVyIGVudGl0aWVzIHRoYXQgY29udHJvbCwgYXJlIGNvbnRyb2xsZWQgYnksIG9yIGFyZSB1bmRlciBjb21tb24KICAgICAgY29udHJvbCB3aXRoIHRoYXQgZW50aXR5LiBGb3IgdGhlIHB1cnBvc2VzIG9mIHRoaXMgZGVmaW5pdGlvbiwKICAgICAgImNvbnRyb2wiIG1lYW5zIChpKSB0aGUgcG93ZXIsIGRpcmVjdCBvciBpbmRpcmVjdCwgdG8gY2F1c2UgdGhlCiAgICAgIGRpcmVjdGlvbiBvciBtYW5hZ2VtZW50IG9mIHN1Y2ggZW50aXR5LCB3aGV0aGVyIGJ5IGNvbnRyYWN0IG9yCiAgICAgIG90aGVyd2lzZSwgb3IgKGlpKSBvd25lcnNoaXAgb2YgZmlmdHkgcGVyY2VudCAoNTAlKSBvciBtb3JlIG9mIHRoZQogICAgICBvdXRzdGFuZGluZyBzaGFyZXMsIG9yIChpaWkpIGJlbmVmaWNpYWwgb3duZXJzaGlwIG9mIHN1Y2ggZW50aXR5LgoKICAgICAgIllvdSIgKG9yICJZb3VyIikgc2hhbGwgbWVhbiBhbiBpbmRpdmlkdWFsIG9yIExlZ2FsIEVudGl0eQogICAgICBleGVyY2lzaW5nIHBlcm1pc3Npb25zIGdyYW50ZWQgYnkgdGhpcyBMaWNlbnNlLgoKICAgICAgIlNvdXJjZSIgZm9ybSBzaGFsbCBtZWFuIHRoZSBwcmVmZXJyZWQgZm9ybSBmb3IgbWFraW5nIG1vZGlmaWNhdGlvbnMsCiAgICAgIGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gc29mdHdhcmUgc291cmNlIGNvZGUsIGRvY3VtZW50YXRpb24KICAgICAgc291cmNlLCBhbmQgY29uZmlndXJhdGlvbiBmaWxlcy4KCiAgICAgICJPYmplY3QiIGZvcm0gc2hhbGwgbWVhbiBhbnkgZm9ybSByZXN1bHRpbmcgZnJvbSBtZWNoYW5pY2FsCiAgICAgIHRyYW5zZm9ybWF0aW9uIG9yIHRyYW5zbGF0aW9uIG9mIGEgU291cmNlIGZvcm0sIGluY2x1ZGluZyBidXQKICAgICAgbm90IGxpbWl0ZWQgdG8gY29tcGlsZWQgb2JqZWN0IGNvZGUsIGdlbmVyYXRlZCBkb2N1bWVudGF0aW9uLAogICAgICBhbmQgY29udmVyc2lvbnMgdG8gb3RoZXIgbWVkaWEgdHlwZXMuCgogICAgICAiV29yayIgc2hhbGwgbWVhbiB0aGUgd29yayBvZiBhdXRob3JzaGlwLCB3aGV0aGVyIGluIFNvdXJjZSBvcgogICAgICBPYmplY3QgZm9ybSwgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIExpY2Vuc2UsIGFzIGluZGljYXRlZCBieSBhCiAgICAgIGNvcHlyaWdodCBub3RpY2UgdGhhdCBpcyBpbmNsdWRlZCBpbiBvciBhdHRhY2hlZCB0byB0aGUgd29yawogICAgICAoYW4gZXhhbXBsZSBpcyBwcm92aWRlZCBpbiB0aGUgQXBwZW5kaXggYmVsb3cpLgoKICAgICAgIkRlcml2YXRpdmUgV29ya3MiIHNoYWxsIG1lYW4gYW55IHdvcmssIHdoZXRoZXIgaW4gU291cmNlIG9yIE9iamVjdAogICAgICBmb3JtLCB0aGF0IGlzIGJhc2VkIG9uIChvciBkZXJpdmVkIGZyb20pIHRoZSBXb3JrIGFuZCBmb3Igd2hpY2ggdGhlCiAgICAgIGVkaXRvcmlhbCByZXZpc2lvbnMsIGFubm90YXRpb25zLCBlbGFib3JhdGlvbnMsIG9yIG90aGVyIG1vZGlmaWNhdGlvbnMKICAgICAgcmVwcmVzZW50LCBhcyBhIHdob2xlLCBhbiBvcmlnaW5hbCB3b3JrIG9mIGF1dGhvcnNoaXAuIEZvciB0aGUgcHVycG9zZXMKICAgICAgb2YgdGhpcyBMaWNlbnNlLCBEZXJpdmF0aXZlIFdvcmtzIHNoYWxsIG5vdCBpbmNsdWRlIHdvcmtzIHRoYXQgcmVtYWluCiAgICAgIHNlcGFyYWJsZSBmcm9tLCBvciBtZXJlbHkgbGluayAob3IgYmluZCBieSBuYW1lKSB0byB0aGUgaW50ZXJmYWNlcyBvZiwKICAgICAgdGhlIFdvcmsgYW5kIERlcml2YXRpdmUgV29ya3MgdGhlcmVvZi4KCiAgICAgICJDb250cmlidXRpb24iIHNoYWxsIG1lYW4gYW55IHdvcmsgb2YgYXV0aG9yc2hpcCwgaW5jbHVkaW5nCiAgICAgIHRoZSBvcmlnaW5hbCB2ZXJzaW9uIG9mIHRoZSBXb3JrIGFuZCBhbnkgbW9kaWZpY2F0aW9ucyBvciBhZGRpdGlvbnMKICAgICAgdG8gdGhhdCBXb3JrIG9yIERlcml2YXRpdmUgV29ya3MgdGhlcmVvZiwgdGhhdCBpcyBpbnRlbnRpb25hbGx5CiAgICAgIHN1Ym1pdHRlZCB0byBMaWNlbnNvciBmb3IgaW5jbHVzaW9uIGluIHRoZSBXb3JrIGJ5IHRoZSBjb3B5cmlnaHQgb3duZXIKICAgICAgb3IgYnkgYW4gaW5kaXZpZHVhbCBvciBMZWdhbCBFbnRpdHkgYXV0aG9yaXplZCB0byBzdWJtaXQgb24gYmVoYWxmIG9mCiAgICAgIHRoZSBjb3B5cmlnaHQgb3duZXIuIEZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBkZWZpbml0aW9uLCAic3VibWl0dGVkIgogICAgICBtZWFucyBhbnkgZm9ybSBvZiBlbGVjdHJvbmljLCB2ZXJiYWwsIG9yIHdyaXR0ZW4gY29tbXVuaWNhdGlvbiBzZW50CiAgICAgIHRvIHRoZSBMaWNlbnNvciBvciBpdHMgcmVwcmVzZW50YXRpdmVzLCBpbmNsdWRpbmcgYnV0IG5vdCBsaW1pdGVkIHRvCiAgICAgIGNvbW11bmljYXRpb24gb24gZWxlY3Ryb25pYyBtYWlsaW5nIGxpc3RzLCBzb3VyY2UgY29kZSBjb250cm9sIHN5c3RlbXMsCiAgICAgIGFuZCBpc3N1ZSB0cmFja2luZyBzeXN0ZW1zIHRoYXQgYXJlIG1hbmFnZWQgYnksIG9yIG9uIGJlaGFsZiBvZiwgdGhlCiAgICAgIExpY2Vuc29yIGZvciB0aGUgcHVycG9zZSBvZiBkaXNjdXNzaW5nIGFuZCBpbXByb3ZpbmcgdGhlIFdvcmssIGJ1dAogICAgICBleGNsdWRpbmcgY29tbXVuaWNhdGlvbiB0aGF0IGlzIGNvbnNwaWN1b3VzbHkgbWFya2VkIG9yIG90aGVyd2lzZQogICAgICBkZXNpZ25hdGVkIGluIHdyaXRpbmcgYnkgdGhlIGNvcHlyaWdodCBvd25lciBhcyAiTm90IGEgQ29udHJpYnV0aW9uLiIKCiAgICAgICJDb250cmlidXRvciIgc2hhbGwgbWVhbiBMaWNlbnNvciBhbmQgYW55IGluZGl2aWR1YWwgb3IgTGVnYWwgRW50aXR5CiAgICAgIG9uIGJlaGFsZiBvZiB3aG9tIGEgQ29udHJpYnV0aW9uIGhhcyBiZWVuIHJlY2VpdmVkIGJ5IExpY2Vuc29yIGFuZAogICAgICBzdWJzZXF1ZW50bHkgaW5jb3Jwb3JhdGVkIHdpdGhpbiB0aGUgV29yay4KCiAgIDIuIEdyYW50IG9mIENvcHlyaWdodCBMaWNlbnNlLiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZgogICAgICB0aGlzIExpY2Vuc2UsIGVhY2ggQ29udHJpYnV0b3IgaGVyZWJ5IGdyYW50cyB0byBZb3UgYSBwZXJwZXR1YWwsCiAgICAgIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlCiAgICAgIGNvcHlyaWdodCBsaWNlbnNlIHRvIHJlcHJvZHVjZSwgcHJlcGFyZSBEZXJpdmF0aXZlIFdvcmtzIG9mLAogICAgICBwdWJsaWNseSBkaXNwbGF5LCBwdWJsaWNseSBwZXJmb3JtLCBzdWJsaWNlbnNlLCBhbmQgZGlzdHJpYnV0ZSB0aGUKICAgICAgV29yayBhbmQgc3VjaCBEZXJpdmF0aXZlIFdvcmtzIGluIFNvdXJjZSBvciBPYmplY3QgZm9ybS4KCiAgIDMuIEdyYW50IG9mIFBhdGVudCBMaWNlbnNlLiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZgogICAgICB0aGlzIExpY2Vuc2UsIGVhY2ggQ29udHJpYnV0b3IgaGVyZWJ5IGdyYW50cyB0byBZb3UgYSBwZXJwZXR1YWwsCiAgICAgIHdvcmxkd2lkZSwgbm9uLWV4Y2x1c2l2ZSwgbm8tY2hhcmdlLCByb3lhbHR5LWZyZWUsIGlycmV2b2NhYmxlCiAgICAgIChleGNlcHQgYXMgc3RhdGVkIGluIHRoaXMgc2VjdGlvbikgcGF0ZW50IGxpY2Vuc2UgdG8gbWFrZSwgaGF2ZSBtYWRlLAogICAgICB1c2UsIG9mZmVyIHRvIHNlbGwsIHNlbGwsIGltcG9ydCwgYW5kIG90aGVyd2lzZSB0cmFuc2ZlciB0aGUgV29yaywKICAgICAgd2hlcmUgc3VjaCBsaWNlbnNlIGFwcGxpZXMgb25seSB0byB0aG9zZSBwYXRlbnQgY2xhaW1zIGxpY2Vuc2FibGUKICAgICAgYnkgc3VjaCBDb250cmlidXRvciB0aGF0IGFyZSBuZWNlc3NhcmlseSBpbmZyaW5nZWQgYnkgdGhlaXIKICAgICAgQ29udHJpYnV0aW9uKHMpIGFsb25lIG9yIGJ5IGNvbWJpbmF0aW9uIG9mIHRoZWlyIENvbnRyaWJ1dGlvbihzKQogICAgICB3aXRoIHRoZSBXb3JrIHRvIHdoaWNoIHN1Y2ggQ29udHJpYnV0aW9uKHMpIHdhcyBzdWJtaXR0ZWQuIElmIFlvdQogICAgICBpbnN0aXR1dGUgcGF0ZW50IGxpdGlnYXRpb24gYWdhaW5zdCBhbnkgZW50aXR5IChpbmNsdWRpbmcgYQogICAgICBjcm9zcy1jbGFpbSBvciBjb3VudGVyY2xhaW0gaW4gYSBsYXdzdWl0KSBhbGxlZ2luZyB0aGF0IHRoZSBXb3JrCiAgICAgIG9yIGEgQ29udHJpYnV0aW9uIGluY29ycG9yYXRlZCB3aXRoaW4gdGhlIFdvcmsgY29uc3RpdHV0ZXMgZGlyZWN0CiAgICAgIG9yIGNvbnRyaWJ1dG9yeSBwYXRlbnQgaW5mcmluZ2VtZW50LCB0aGVuIGFueSBwYXRlbnQgbGljZW5zZXMKICAgICAgZ3JhbnRlZCB0byBZb3UgdW5kZXIgdGhpcyBMaWNlbnNlIGZvciB0aGF0IFdvcmsgc2hhbGwgdGVybWluYXRlCiAgICAgIGFzIG9mIHRoZSBkYXRlIHN1Y2ggbGl0aWdhdGlvbiBpcyBmaWxlZC4KCiAgIDQuIFJlZGlzdHJpYnV0aW9uLiBZb3UgbWF5IHJlcHJvZHVjZSBhbmQgZGlzdHJpYnV0ZSBjb3BpZXMgb2YgdGhlCiAgICAgIFdvcmsgb3IgRGVyaXZhdGl2ZSBXb3JrcyB0aGVyZW9mIGluIGFueSBtZWRpdW0sIHdpdGggb3Igd2l0aG91dAogICAgICBtb2RpZmljYXRpb25zLCBhbmQgaW4gU291cmNlIG9yIE9iamVjdCBmb3JtLCBwcm92aWRlZCB0aGF0IFlvdQogICAgICBtZWV0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKCiAgICAgIChhKSBZb3UgbXVzdCBnaXZlIGFueSBvdGhlciByZWNpcGllbnRzIG9mIHRoZSBXb3JrIG9yCiAgICAgICAgICBEZXJpdmF0aXZlIFdvcmtzIGEgY29weSBvZiB0aGlzIExpY2Vuc2U7IGFuZAoKICAgICAgKGIpIFlvdSBtdXN0IGNhdXNlIGFueSBtb2RpZmllZCBmaWxlcyB0byBjYXJyeSBwcm9taW5lbnQgbm90aWNlcwogICAgICAgICAgc3RhdGluZyB0aGF0IFlvdSBjaGFuZ2VkIHRoZSBmaWxlczsgYW5kCgogICAgICAoYykgWW91IG11c3QgcmV0YWluLCBpbiB0aGUgU291cmNlIGZvcm0gb2YgYW55IERlcml2YXRpdmUgV29ya3MKICAgICAgICAgIHRoYXQgWW91IGRpc3RyaWJ1dGUsIGFsbCBjb3B5cmlnaHQsIHBhdGVudCwgdHJhZGVtYXJrLCBhbmQKICAgICAgICAgIGF0dHJpYnV0aW9uIG5vdGljZXMgZnJvbSB0aGUgU291cmNlIGZvcm0gb2YgdGhlIFdvcmssCiAgICAgICAgICBleGNsdWRpbmcgdGhvc2Ugbm90aWNlcyB0aGF0IGRvIG5vdCBwZXJ0YWluIHRvIGFueSBwYXJ0IG9mCiAgICAgICAgICB0aGUgRGVyaXZhdGl2ZSBXb3JrczsgYW5kCgogICAgICAoZCkgSWYgdGhlIFdvcmsgaW5jbHVkZXMgYSAiTk9USUNFIiB0ZXh0IGZpbGUgYXMgcGFydCBvZiBpdHMKICAgICAgICAgIGRpc3RyaWJ1dGlvbiwgdGhlbiBhbnkgRGVyaXZhdGl2ZSBXb3JrcyB0aGF0IFlvdSBkaXN0cmlidXRlIG11c3QKICAgICAgICAgIGluY2x1ZGUgYSByZWFkYWJsZSBjb3B5IG9mIHRoZSBhdHRyaWJ1dGlvbiBub3RpY2VzIGNvbnRhaW5lZAogICAgICAgICAgd2l0aGluIHN1Y2ggTk9USUNFIGZpbGUsIGV4Y2x1ZGluZyB0aG9zZSBub3RpY2VzIHRoYXQgZG8gbm90CiAgICAgICAgICBwZXJ0YWluIHRvIGFueSBwYXJ0IG9mIHRoZSBEZXJpdmF0aXZlIFdvcmtzLCBpbiBhdCBsZWFzdCBvbmUKICAgICAgICAgIG9mIHRoZSBmb2xsb3dpbmcgcGxhY2VzOiB3aXRoaW4gYSBOT1RJQ0UgdGV4dCBmaWxlIGRpc3RyaWJ1dGVkCiAgICAgICAgICBhcyBwYXJ0IG9mIHRoZSBEZXJpdmF0aXZlIFdvcmtzOyB3aXRoaW4gdGhlIFNvdXJjZSBmb3JtIG9yCiAgICAgICAgICBkb2N1bWVudGF0aW9uLCBpZiBwcm92aWRlZCBhbG9uZyB3aXRoIHRoZSBEZXJpdmF0aXZlIFdvcmtzOyBvciwKICAgICAgICAgIHdpdGhpbiBhIGRpc3BsYXkgZ2VuZXJhdGVkIGJ5IHRoZSBEZXJpdmF0aXZlIFdvcmtzLCBpZiBhbmQKICAgICAgICAgIHdoZXJldmVyIHN1Y2ggdGhpcmQtcGFydHkgbm90aWNlcyBub3JtYWxseSBhcHBlYXIuIFRoZSBjb250ZW50cwogICAgICAgICAgb2YgdGhlIE5PVElDRSBmaWxlIGFyZSBmb3IgaW5mb3JtYXRpb25hbCBwdXJwb3NlcyBvbmx5IGFuZAogICAgICAgICAgZG8gbm90IG1vZGlmeSB0aGUgTGljZW5zZS4gWW91IG1heSBhZGQgWW91ciBvd24gYXR0cmlidXRpb24KICAgICAgICAgIG5vdGljZXMgd2l0aGluIERlcml2YXRpdmUgV29ya3MgdGhhdCBZb3UgZGlzdHJpYnV0ZSwgYWxvbmdzaWRlCiAgICAgICAgICBvciBhcyBhbiBhZGRlbmR1bSB0byB0aGUgTk9USUNFIHRleHQgZnJvbSB0aGUgV29yaywgcHJvdmlkZWQKICAgICAgICAgIHRoYXQgc3VjaCBhZGRpdGlvbmFsIGF0dHJpYnV0aW9uIG5vdGljZXMgY2Fubm90IGJlIGNvbnN0cnVlZAogICAgICAgICAgYXMgbW9kaWZ5aW5nIHRoZSBMaWNlbnNlLgoKICAgICAgWW91IG1heSBhZGQgWW91ciBvd24gY29weXJpZ2h0IHN0YXRlbWVudCB0byBZb3VyIG1vZGlmaWNhdGlvbnMgYW5kCiAgICAgIG1heSBwcm92aWRlIGFkZGl0aW9uYWwgb3IgZGlmZmVyZW50IGxpY2Vuc2UgdGVybXMgYW5kIGNvbmRpdGlvbnMKICAgICAgZm9yIHVzZSwgcmVwcm9kdWN0aW9uLCBvciBkaXN0cmlidXRpb24gb2YgWW91ciBtb2RpZmljYXRpb25zLCBvcgogICAgICBmb3IgYW55IHN1Y2ggRGVyaXZhdGl2ZSBXb3JrcyBhcyBhIHdob2xlLCBwcm92aWRlZCBZb3VyIHVzZSwKICAgICAgcmVwcm9kdWN0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIG9mIHRoZSBXb3JrIG90aGVyd2lzZSBjb21wbGllcyB3aXRoCiAgICAgIHRoZSBjb25kaXRpb25zIHN0YXRlZCBpbiB0aGlzIExpY2Vuc2UuCgogICA1LiBTdWJtaXNzaW9uIG9mIENvbnRyaWJ1dGlvbnMuIFVubGVzcyBZb3UgZXhwbGljaXRseSBzdGF0ZSBvdGhlcndpc2UsCiAgICAgIGFueSBDb250cmlidXRpb24gaW50ZW50aW9uYWxseSBzdWJtaXR0ZWQgZm9yIGluY2x1c2lvbiBpbiB0aGUgV29yawogICAgICBieSBZb3UgdG8gdGhlIExpY2Vuc29yIHNoYWxsIGJlIHVuZGVyIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZgogICAgICB0aGlzIExpY2Vuc2UsIHdpdGhvdXQgYW55IGFkZGl0aW9uYWwgdGVybXMgb3IgY29uZGl0aW9ucy4KICAgICAgTm90d2l0aHN0YW5kaW5nIHRoZSBhYm92ZSwgbm90aGluZyBoZXJlaW4gc2hhbGwgc3VwZXJzZWRlIG9yIG1vZGlmeQogICAgICB0aGUgdGVybXMgb2YgYW55IHNlcGFyYXRlIGxpY2Vuc2UgYWdyZWVtZW50IHlvdSBtYXkgaGF2ZSBleGVjdXRlZAogICAgICB3aXRoIExpY2Vuc29yIHJlZ2FyZGluZyBzdWNoIENvbnRyaWJ1dGlvbnMuCgogICA2LiBUcmFkZW1hcmtzLiBUaGlzIExpY2Vuc2UgZG9lcyBub3QgZ3JhbnQgcGVybWlzc2lvbiB0byB1c2UgdGhlIHRyYWRlCiAgICAgIG5hbWVzLCB0cmFkZW1hcmtzLCBzZXJ2aWNlIG1hcmtzLCBvciBwcm9kdWN0IG5hbWVzIG9mIHRoZSBMaWNlbnNvciwKICAgICAgZXhjZXB0IGFzIHJlcXVpcmVkIGZvciByZWFzb25hYmxlIGFuZCBjdXN0b21hcnkgdXNlIGluIGRlc2NyaWJpbmcgdGhlCiAgICAgIG9yaWdpbiBvZiB0aGUgV29yayBhbmQgcmVwcm9kdWNpbmcgdGhlIGNvbnRlbnQgb2YgdGhlIE5PVElDRSBmaWxlLgoKICAgNy4gRGlzY2xhaW1lciBvZiBXYXJyYW50eS4gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yCiAgICAgIGFncmVlZCB0byBpbiB3cml0aW5nLCBMaWNlbnNvciBwcm92aWRlcyB0aGUgV29yayAoYW5kIGVhY2gKICAgICAgQ29udHJpYnV0b3IgcHJvdmlkZXMgaXRzIENvbnRyaWJ1dGlvbnMpIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvcgogICAgICBpbXBsaWVkLCBpbmNsdWRpbmcsIHdpdGhvdXQgbGltaXRhdGlvbiwgYW55IHdhcnJhbnRpZXMgb3IgY29uZGl0aW9ucwogICAgICBvZiBUSVRMRSwgTk9OLUlORlJJTkdFTUVOVCwgTUVSQ0hBTlRBQklMSVRZLCBvciBGSVRORVNTIEZPUiBBCiAgICAgIFBBUlRJQ1VMQVIgUFVSUE9TRS4gWW91IGFyZSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIGRldGVybWluaW5nIHRoZQogICAgICBhcHByb3ByaWF0ZW5lc3Mgb2YgdXNpbmcgb3IgcmVkaXN0cmlidXRpbmcgdGhlIFdvcmsgYW5kIGFzc3VtZSBhbnkKICAgICAgcmlza3MgYXNzb2NpYXRlZCB3aXRoIFlvdXIgZXhlcmNpc2Ugb2YgcGVybWlzc2lvbnMgdW5kZXIgdGhpcyBMaWNlbnNlLgoKICAgOC4gTGltaXRhdGlvbiBvZiBMaWFiaWxpdHkuIEluIG5vIGV2ZW50IGFuZCB1bmRlciBubyBsZWdhbCB0aGVvcnksCiAgICAgIHdoZXRoZXIgaW4gdG9ydCAoaW5jbHVkaW5nIG5lZ2xpZ2VuY2UpLCBjb250cmFjdCwgb3Igb3RoZXJ3aXNlLAogICAgICB1bmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgKHN1Y2ggYXMgZGVsaWJlcmF0ZSBhbmQgZ3Jvc3NseQogICAgICBuZWdsaWdlbnQgYWN0cykgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNoYWxsIGFueSBDb250cmlidXRvciBiZQogICAgICBsaWFibGUgdG8gWW91IGZvciBkYW1hZ2VzLCBpbmNsdWRpbmcgYW55IGRpcmVjdCwgaW5kaXJlY3QsIHNwZWNpYWwsCiAgICAgIGluY2lkZW50YWwsIG9yIGNvbnNlcXVlbnRpYWwgZGFtYWdlcyBvZiBhbnkgY2hhcmFjdGVyIGFyaXNpbmcgYXMgYQogICAgICByZXN1bHQgb2YgdGhpcyBMaWNlbnNlIG9yIG91dCBvZiB0aGUgdXNlIG9yIGluYWJpbGl0eSB0byB1c2UgdGhlCiAgICAgIFdvcmsgKGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWQgdG8gZGFtYWdlcyBmb3IgbG9zcyBvZiBnb29kd2lsbCwKICAgICAgd29yayBzdG9wcGFnZSwgY29tcHV0ZXIgZmFpbHVyZSBvciBtYWxmdW5jdGlvbiwgb3IgYW55IGFuZCBhbGwKICAgICAgb3RoZXIgY29tbWVyY2lhbCBkYW1hZ2VzIG9yIGxvc3NlcyksIGV2ZW4gaWYgc3VjaCBDb250cmlidXRvcgogICAgICBoYXMgYmVlbiBhZHZpc2VkIG9mIHRoZSBwb3NzaWJpbGl0eSBvZiBzdWNoIGRhbWFnZXMuCgogICA5LiBBY2NlcHRpbmcgV2FycmFudHkgb3IgQWRkaXRpb25hbCBMaWFiaWxpdHkuIFdoaWxlIHJlZGlzdHJpYnV0aW5nCiAgICAgIHRoZSBXb3JrIG9yIERlcml2YXRpdmUgV29ya3MgdGhlcmVvZiwgWW91IG1heSBjaG9vc2UgdG8gb2ZmZXIsCiAgICAgIGFuZCBjaGFyZ2UgYSBmZWUgZm9yLCBhY2NlcHRhbmNlIG9mIHN1cHBvcnQsIHdhcnJhbnR5LCBpbmRlbW5pdHksCiAgICAgIG9yIG90aGVyIGxpYWJpbGl0eSBvYmxpZ2F0aW9ucyBhbmQvb3IgcmlnaHRzIGNvbnNpc3RlbnQgd2l0aCB0aGlzCiAgICAgIExpY2Vuc2UuIEhvd2V2ZXIsIGluIGFjY2VwdGluZyBzdWNoIG9ibGlnYXRpb25zLCBZb3UgbWF5IGFjdCBvbmx5CiAgICAgIG9uIFlvdXIgb3duIGJlaGFsZiBhbmQgb24gWW91ciBzb2xlIHJlc3BvbnNpYmlsaXR5LCBub3Qgb24gYmVoYWxmCiAgICAgIG9mIGFueSBvdGhlciBDb250cmlidXRvciwgYW5kIG9ubHkgaWYgWW91IGFncmVlIHRvIGluZGVtbmlmeSwKICAgICAgZGVmZW5kLCBhbmQgaG9sZCBlYWNoIENvbnRyaWJ1dG9yIGhhcm1sZXNzIGZvciBhbnkgbGlhYmlsaXR5CiAgICAgIGluY3VycmVkIGJ5LCBvciBjbGFpbXMgYXNzZXJ0ZWQgYWdhaW5zdCwgc3VjaCBDb250cmlidXRvciBieSByZWFzb24KICAgICAgb2YgeW91ciBhY2NlcHRpbmcgYW55IHN1Y2ggd2FycmFudHkgb3IgYWRkaXRpb25hbCBsaWFiaWxpdHkuCgogICBFTkQgT0YgVEVSTVMgQU5EIENPTkRJVElPTlMKCiAgIEFQUEVORElYOiBIb3cgdG8gYXBwbHkgdGhlIEFwYWNoZSBMaWNlbnNlIHRvIHlvdXIgd29yay4KCiAgICAgIFRvIGFwcGx5IHRoZSBBcGFjaGUgTGljZW5zZSB0byB5b3VyIHdvcmssIGF0dGFjaCB0aGUgZm9sbG93aW5nCiAgICAgIGJvaWxlcnBsYXRlIG5vdGljZSwgd2l0aCB0aGUgZmllbGRzIGVuY2xvc2VkIGJ5IGJyYWNrZXRzICJ7fSIKICAgICAgcmVwbGFjZWQgd2l0aCB5b3VyIG93biBpZGVudGlmeWluZyBpbmZvcm1hdGlvbi4gKERvbid0IGluY2x1ZGUKICAgICAgdGhlIGJyYWNrZXRzISkgIFRoZSB0ZXh0IHNob3VsZCBiZSBlbmNsb3NlZCBpbiB0aGUgYXBwcm9wcmlhdGUKICAgICAgY29tbWVudCBzeW50YXggZm9yIHRoZSBmaWxlIGZvcm1hdC4gV2UgYWxzbyByZWNvbW1lbmQgdGhhdCBhCiAgICAgIGZpbGUgb3IgY2xhc3MgbmFtZSBhbmQgZGVzY3JpcHRpb24gb2YgcHVycG9zZSBiZSBpbmNsdWRlZCBvbiB0aGUKICAgICAgc2FtZSAicHJpbnRlZCBwYWdlIiBhcyB0aGUgY29weXJpZ2h0IG5vdGljZSBmb3IgZWFzaWVyCiAgICAgIGlkZW50aWZpY2F0aW9uIHdpdGhpbiB0aGlyZC1wYXJ0eSBhcmNoaXZlcy4KCiAgIENvcHlyaWdodCAyMDExLTIwMTcgTWFyY2luIEt1bGlrCgogICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCiAgIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAgIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgo="
        },
        {
          "type_url": "README.md",
          "value": "IyBpYm0tbm9kZWpzLXNhbXBsZQoKKiBBIHNhbXBsZSBhcHBsaWNhdGlvbiB1c2luZyBOb2RlLmpzCgojIyMgVGhpcyBzYW1wbGUgaXMgZm9yIGRlbW9uc3RyYXRpdmUgcHVycG9zZXMgb25seSBhbmQgaXMgTk9UIGZvciBwcm9kdWN0aW9uIHVzZS4gIyMjCgojIyBJbnRyb2R1Y3Rpb24KVGhpcyBjaGFydCBkZXBsb3lzIGEgTm9kZS5qcyB3ZWIgYXBwbGljYXRpb24gd2hpY2ggaG9zdHMgZG9jdW1lbnRhdGlvbiBvbiB0aGUgcHJvY2VzcyBvZiBjcmVhdGluZyBhbmQgZGVwbG95aW5nIHlvdXIgb3duIE5vZGUuanMgYXBwbGljYXRpb25zLgoKVGhpcyBzYW1wbGUgYXBwbGljYXRpb24KCi0gd2FzIGluaXRpYWxseSBjcmVhdGVkIHVzaW5nIGBpZHQgY3JlYXRlYAotIHVzZXMgW2FwcG1ldHJpY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9SdW50aW1lVG9vbHMvYXBwbWV0cmljcykgYW5kIFthcHBtZXRyaWNzLWRhc2hdKGh0dHBzOi8vZ2l0aHViLmNvbS9SdW50aW1lVG9vbHMvYXBwbWV0cmljcy1kYXNoKTogdGhlIGVuZHBvaW50IGJlaW5nIGAvYXBwbWV0cmljcy1kYXNoYC4KLSBoYXMgYSAic2NyYXBlIiBhbm5vdGF0aW9uIGluIHRoZSBgPGNoYXJ0IGRpcmVjdG9yeT4vdGVtcGxhdGVzL3NlcnZpY2UueWFtbGAgZmlsZS4gSW4gY29tYmluYXRpb24gd2l0aCB0aGUgW2FwcG1ldHJpY3MtcHJvbWV0aGV1c10oaHR0cHM6Ly9naXRodWIuY29tL1J1bnRpbWVUb29scy9hcHBtZXRyaWNzLXByb21ldGhldXMpIG1vZHVsZSBpbmNsdXNpb24gYW5kIHVzYWdlLCB0aGlzIGVuYWJsZXMgdGhlIHNhbXBsZSB0byBiZSBhdXRvbWF0aWNhbGx5IHNjcmFwZWQgYnkgYSBkZXBsb3llZCBpbnN0YW5jZSBvZiBQcm9tZXRoZXVzIGluIG9yZGVyIGZvciBtZXRyaWNzIHRvIGJlIGdhdGhlcmVkIGFuZCBkaXNwbGF5ZWQgdXNpbmcgdGhlIFByb21ldGhldXMgd2ViIFVJLiBZb3UgY2FuIHZpZXcgdGhlIHJhdyBkYXRhIHRoYXQgd2lsbCBiZSBhdmFpbGFibGUgdG8gUHJvbWV0aGV1cyBhdCB0aGUgYC9tZXRyaWNzYCBlbmRwb2ludC4KVGhpcyBhbGxvd3MgZGV2ZWxvcGVycyB0byBxdWlja2x5IGRldGVybWluZSBob3cgdGhlIGFwcGxpY2F0aW9uIGlzIHBlcmZvcm1pbmcgYWNyb3NzIHBvdGVudGlhbGx5IG1hbnkgS3ViZXJuZXRlcyBwb2RzLgotIGNhbiBiZSBkZXBsb3llZCB1c2luZyB0aGUgSUJNIENsb3VkIERldmVsb3BlciBUb29scy4KCiMjIENoYXJ0IERldGFpbHMKClRoaXMgY2hhcnQgY29udGFpbnMgZGVmaW5pdGlvbnMgZm9yIHR3byBLdWJlcm5ldGVzIHJlc291cmNlcwoKKiBBIFBvZCAtIHdoaWNoIGhvc3RzIHRoZSBhcHBsaWNhdGlvbgoqIEEgU2VydmljZSAtIHdoaWNoIGV4cG9zZXMgdGhlIGFwcGxpY2F0aW9uJ3MgZW5kcG9pbnRzCgojIyBQcmVyZXF1aXNpdGVzCgooT3B0aW9uYWwpIFlvdSBzaG91bGQgaGF2ZSBQcm9tZXRoZXVzIGRlcGxveWVkIGluIHlvdXIgY2x1c3Rlci4gVGhpcyBpcyBub3QgYSBtYW5kYXRvcnkgc3RlcCBhbmQgY2FuIGFsc28gYmUgZG9uZSBhZnRlciBkZXBsb3ltZW50CgojIyBQb2RTZWN1cml0eVBvbGljeSBSZXF1aXJlbWVudHMKCiMjIFJlc291cmNlcyBSZXF1aXJlZAoKQnkgZGVmYXVsdCB0aGlzIGFwcGxpY2F0aW9uIHJlcXVlc3RzIGFuZCBsaW1pdHMgaXRzZWxmIHRvIDEyOE1pQiBvZiBtZW1vcnkgYW5kIDEwMG1pbGljcHVzLgoKIyMgSW5zdGFsbGluZyB0aGUgQ2hhcnQKClRvIGluc3RhbGwgdGhlIGNoYXJ0IHdpdGggdGhlIHJlbGVhc2UgbmFtZSBgbXktcmVsZWFzZWA6CgpgYGBiYXNoCiQgaGVsbSBpbnN0YWxsIC0tbmFtZSBteS1yZWxlYXNlIC0tdGxzCmBgYAoKd2hlcmUgbXktcmVsZWFzZSBjYW4gYmUgYW55dGhpbmc6IHRoaXMgaXMgdGhlIGRlc2lyZWQgbmFtZSBvZiB0aGUgcmVsZWFzZS4gQSBuYW1lIHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgaWYgbm90IHNwZWNpZmllZC4KCiMjIyBWZXJpZnlpbmcgdGhlIENoYXJ0CgpTZWUgTk9URVMudHh0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNoYXJ0IGZvciB2ZXJpZmljYXRpb24gaW5zdHJ1Y3Rpb25zCgojIyMgVW5pbnN0YWxsaW5nIHRoZSBDaGFydAoKVG8gdW5pbnN0YWxsL2RlbGV0ZSB0aGUgYG15LXJlbGVhc2VgIGRlcGxveW1lbnQ6CgpgYGBiYXNoCiQgaGVsbSBkZWxldGUgLS1wdXJnZSBteS1yZWxlYXNlIC0tdGxzCmBgYApZb3UgY2FuIGZpbmQgdGhlIGRlcGxveW1lbnQgd2l0aCBgaGVsbSBsaXN0IC0tYWxsIC0tdGxzYCBhbmQgc2VhcmNoaW5nIGZvciBhbiBlbnRyeSB3aXRoIHRoZSBjaGFydCBuYW1lICJpYm0tbm9kZWpzLXNhbXBsZSIuCgojIyBDb25maWd1cmF0aW9uCgpUaGUgZm9sbG93aW5nIHRhYmxlIGxpc3RzIHRoZSBjb25maWd1cmFibGUgcGFyYW1ldGVycyBvZiB0aGUgaWJtLW5vZGVqcy1zYW1wbGUgY2hhcnQgYW5kIHRoZWlyIGRlZmF1bHQgdmFsdWVzLgoKfCBQYXJhbWV0ZXIgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlZmF1bHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8CnwgYGltYWdlLnJlcG9zaXRvcnlgICAgICAgICAgIHwgSW1hZ2UgcmVwb3NpdG9yeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgaW1hZ2UudGFnYCAgICAgICAgICAgICAgICAgfCBJbWFnZSB0YWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBsYXRlc3RgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgaW1hZ2UucHVsbFBvbGljeWAgICAgICAgICAgfCBJbWFnZSBwdWxsIHBvbGljeSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBBbHdheXNgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IGBsaXZlbmVzc1Byb2JlLmluaXRpYWxEZWxheVNlY29uZHNgICAgfCBIb3cgbG9uZyB0byB3YWl0IGJlZm9yZSBiZWdpbm5pbmcgdGhlIGNoZWNrcyBvdXIgcG9kKHMpIGFyZSB1cCB8ICAgMzAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgbGl2ZW5lc3NQcm9iZS5wZXJpb2RTZWNvbmRzYCAgICAgICAgIHwgVGhlIGludGVydmFsIGF0IHdoaWNoIHdlJ2xsIGNoZWNrIGlmIGEgcG9kIGlzIHJ1bm5pbmcgT0sgYmVmb3JlIGJlaW5nIHJlc3RhcnRlZCAgICAgfCAxMCAgICAgICAgICB8CnwgYHNlcnZpY2UubmFtZWAgICAgICAgICAgICAgIHwgazhzIHNlcnZpY2UgbmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgTm9kZWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgc2VydmljZS50eXBlYCAgICAgICAgICAgICAgfCBrOHMgc2VydmljZSB0eXBlIGV4cG9zaW5nIHBvcnQgICAgICAgICAgICAgICAgICB8IGBOb2RlUG9ydGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IGBzZXJ2aWNlLnBvcnRgICAgICAgICAgICAgICB8IFRDUCBQb3J0IGZvciB0aGlzIHNlcnZpY2UgICAgICAgICAgICAgICAgICAgICAgIHwgMzAwMCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHJlc291cmNlcy5yZXF1ZXN0cy5tZW1vcnlgIHwgTWluaW11bSBtZW1vcnkgcmVxdWlyZW1lbnQgICAgICAgICAgICAgICAgICAgICAgfCBgMTI4TWkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCBgcmVzb3VyY2VzLnJlcXVlc3RzLmNwdWAgICAgfCBNaW5pbXVtIENQVSByZXF1aXJlbWVudCAgICAgICAgICAgICAgICAgICAgICAgICB8IGAxMDBtYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IGByZXNvdXJjZXMubGltaXRzLm1lbW9yeWAgICB8IE1lbW9yeSByZXNvdXJjZSBsaW1pdHMgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYDEyOE1pYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgYHJlc291cmNlcy5saW1pdHMuY3B1YCAgICAgIHwgQ1BVIHJlc291cmNlIGxpbWl0cyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBgMTAwbWAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKCiMjIFN0b3JhZ2UKCk5vdCBhcHBsaWNhYmxlCgojIyBMaW1pdGF0aW9ucwoKKiBWZXJpZmllZCBvbiBJQk0gQ2xvdWQgUHJpdmF0ZQoqIFZlcmlmaWVkIG9uIElCTSBLdWJlcm5ldGVzIFNlcnZpY2UKCiMjIERvY3VtZW50YXRpb24KClNlZSB0aGUgW05vZGUuanMgQCBJQk0gZGV2ZWxvcGVyIGNlbnRlcl0oaHR0cHM6Ly9kZXZlbG9wZXIuaWJtLmNvbS9ub2RlLykgZm9yIGFsbCB0aGluZ3MgTm9kZS5qcyAtIGluY2x1ZGluZyBtb3JlIHNhbXBsZXMsIHR1dG9yaWFscyBhbmQgYmxvZyBwb3N0cy4gRm9yIGNvbmZpZ3VyaW5nIE5vZGUuanMgaXRzZWxmLCBjb25zdWx0IHRoZSBvZmZpY2lhbCBbTm9kZS5qcyBjb21tdW5pdHkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9ub2RlanMub3JnL2VuL2RvY3MvKS4KCiMjIyBEZXBsb3lpbmcgb24gcGxhdGZvcm1zIG90aGVyIHRoYW4geDg2LTY0Ci0gTXVsdGlhcmNoIGltYWdlcyBhcmUgdXNlZCBzbyB0aGUgY29ycmVjdCBOb2RlLmpzIERvY2tlciBpbWFnZSB3aWxsIGJlIHB1bGxlZCBiYXNlZCBvbiB5b3VyIHBsYXRmb3JtLiBTdXBwb3J0ZWQgcGxhdGZvcm1zIGZvciB0aGlzIHNhbXBsZSBpbmNsdWRlIHBwYzY0bGUsIHg4Ni02NCBhbmQgczM5MHguCi0gTm90ZSB0aGF0IHRoZSBJQk0gQ2xvdWQgRGV2ZWxvcGVyIFRvb2xzIGFyZSBub3QgYXZhaWxhYmxlIGZvciBldmVyeSBwbGF0Zm9ybTogY29uc3VsdCB0aGUgW0NMSSBkb2NzXShodHRwczovL3d3dy5pYm0uY29tL2Nsb3VkL2NsaSkgdG8gZmluZCBvdXQgbW9yZS4KCiMjIyBEaXNjbGFpbWVycwpOb2RlLmpzIGlzIGFuIG9mZmljaWFsIHRyYWRlbWFyayBvZiBKb3llbnQuIEltYWdlcyBhcmUgdXNlZCBhY2NvcmRpbmcgdG8gdGhlIE5vZGUuanMgdmlzdWFsIGd1aWRlbGluZXMgLSBubyBjb3B5cmlnaHQgY2xhaW1zIGFyZSBtYWRlLiBZb3UgY2FuIHZpZXcgdGhlIGd1aWRlbGluZXMgW2hlcmVdKGh0dHBzOi8vbm9kZWpzLm9yZy9zdGF0aWMvZG9jdW1lbnRzL2ZvdW5kYXRpb24tdmlzdWFsLWd1aWRlbGluZXMucGRmKS4KClRoaXMgc2FtcGxlIGlzIG5vdCBmb3JtYWxseSByZWxhdGVkIHRvIG9yIGVuZG9yc2VkIGJ5IHRoZSBvZmZpY2lhbCBOb2RlLmpzIG9wZW4gc291cmNlIG9yIGNvbW1lcmNpYWwgcHJvamVjdC4K"
        },
        {
          "type_url": "RELEASENOTES.md",
          "value": "IyBpYm0tbm9kZWpzLXNhbXBsZUAyLjAuMAoKIyMgQnJlYWtpbmcgQ2hhbmdlcwoqIFJlbW92YWwgb2YgTm9kZSA2IERvY2tlciBpbWFnZSBkdWUgdG8gTm9kZSA2IGJlaW5nIEVuZC1vZi1MaWZlLiAKKiBEZWZhdWx0cyB0byBOb2RlIDEwIERvY2tlciBpbWFnZS4gCgojIyBXaGF04oCZcyBuZXcgaW4gQ2hhcnQgVmVyc2lvbiAyLjAuMAoqIE5vZGUgMTAgRG9ja2VyIGltYWdlLiAKCiMjIEZpeGVzCiogSW5jbHVkZXMgbWlzc2luZyBtZXRhZGF0YSBmb3IgY2F0YWxvZyBjbGFzc2lmaWNhdGlvbiBhbmQgcGFyYW1ldGVyIHZhbHVlcwoKIyMgUHJlcmVxdWlzaXRlcwoqIEt1YmVybmV0ZXMgPj0xLjkuMQoqIFRpbGxlciA+PTIuNi4wCgojIyBEb2N1bWVudGF0aW9uCgojIyMgVXBncmFkZQoKVG8gdXBncmFkZSBhbiBleGlzdGluZyByZWxlYXNlIHdpdGggbmFtZSBgbXktcmVsZWFzZWAgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIHRoaXMgY2hhcnQ6CgpgYGBiYXNoCiQgaGVsbSB1cGdyYWRlIG15LXJlbGVhc2Ugc3RhYmxlL2libS1ub2RlanMtc2FtcGxlIC0tdGxzCmBgYAoKIyMjIEdlbmVyYWwKClRoZSBhcHBsaWNhdGlvbiBpcyBzZWxmLWRvY3VtZW50aW5nIGJ5IHNlcnZpbmcgYSB3ZWIgcGFnZSBjb250YWluaW5nIGl0cyBnZW5lcmFsIGRvY3VtZW50YXRpb24uClNlZSBOT1RFUy50eHQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY2hhcnQgZm9yIGluZm9ybWF0aW9uIG9uIGFjY2Vzc2luZyB0aGUgc2FucGxlIGFwcGxpY2F0aW9uLgoKIyMgVmVyc2lvbiBIaXN0b3J5Cgp8IENoYXJ0IHwgRGF0ZSAgICAgfCBLdWJlcm5ldGVzIFJlcXVpcmVkIHwgSW1hZ2UocykgU3VwcG9ydGVkICAgICAgIHwgQnJlYWtpbmcgQ2hhbmdlcyB8IERldGFpbHMgfAp8IC0tLS0tIHwgLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIHwgLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfCAKfCAyLjAuMCB8IE1hciAyMDE4IHwgPj0xLjkuMSAgICAgICAgICAgICB8IGljcC1ub2RlanMtc2FtcGxlOmxhdGVzdCB8IE5vbmUgICAgICAgICAgICAgfCBOb2RlIDEwIGNoYW5nZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IDEuMi4xIHwgRGVjIDIwMTggfCA+PTEuOS4xICAgICAgICAgICAgIHwgaWNwLW5vZGVqcy1zYW1wbGU6bGF0ZXN0IHwgTm9uZSAgICAgICAgICAgICB8IENoYXJ0IG1ldGFkYXRhIGFuZCBkb2N1bWVudGF0aW9uIGNoYW5nZXMgfAp8IDEuMi4wIHwgTWFyIDIwMTggfCA+PTEuOS4xICAgICAgICAgICAgIHwgaWNwLW5vZGVqcy1zYW1wbGU6bGF0ZXN0IHwgTm9uZSAgICAgICAgICAgICB8IEZpcnN0IHJlbGVhc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8Cg=="
        },
        {
          "type_url": "ibm_cloud_pak\/manifest.yaml",
          "value": "Y2hhcnRzOgogIC0gYXJjaGl2ZTogaWJtLW5vZGVqcy1zYW1wbGUudGd6CiAgICByZXBvc2l0b3J5LWtleXM6IAogICAgICAtIGltYWdlLnJlcG9zaXRvcnkKCmltYWdlczoKLSBpbWFnZTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlOjEwICN0YXJnZXQgZmF0IG1hbmlmZXN0IG5hbWUgKHdpbGwgYmUgcHJlZml4ZWQgd2l0aCByZWdpc3RyeSBob3N0bmFtZSkKICByZWZlcmVuY2VzOgogIC0gcmVwb3NpdG9yeTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlLWFtZDY0OjEwICN0YXJnZXQgaW1hZ2UgbmFtZS90YWcgKHdpbGwgYmUgcHJlZml4ZWQgd2l0aCByZWdpc3RyeSBob3N0bmFtZSkKICAgIHB1bGwtcmVwb3NpdG9yeTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlLWFtZDY0OjEwICN3aGVyZSB0byBwdWxsIHRoZSBpbWFnZSBmcm9tCiAgICBwbGF0Zm9ybToKICAgICAgb3M6IGxpbnV4CiAgICAgIGFyY2hpdGVjdHVyZTogYW1kNjQKICAtIHJlcG9zaXRvcnk6IGlibWNvbS9pY3Atbm9kZWpzLXNhbXBsZS1wcGM2NGxlOjEwICN0YXJnZXQgaW1hZ2UgbmFtZS90YWcgKHdpbGwgYmUgcHJlZml4ZWQgd2l0aCByZWdpc3RyeSBob3N0bmFtZSkKICAgIHB1bGwtcmVwb3NpdG9yeTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlLXBwYzY0bGU6MTAgI3doZXJlIHRvIHB1bGwgdGhlIGltYWdlIGZyb20KICAgIHBsYXRmb3JtOgogICAgICBvczogbGludXgKICAgICAgYXJjaGl0ZWN0dXJlOiBwcGM2NGxlCiAgLSByZXBvc2l0b3J5OiBpYm1jb20vaWNwLW5vZGVqcy1zYW1wbGUtczM5MHg6MTAgI3RhcmdldCBpbWFnZSBuYW1lL3RhZyAod2lsbCBiZSBwcmVmaXhlZCB3aXRoIHJlZ2lzdHJ5IGhvc3RuYW1lKQogICAgcHVsbC1yZXBvc2l0b3J5OiBpYm1jb20vaWNwLW5vZGVqcy1zYW1wbGUtczM5MHg6MTAgI3doZXJlIHRvIHB1bGwgdGhlIGltYWdlIGZyb20KICAgIHBsYXRmb3JtOgogICAgICBvczogbGludXgKICAgICAgYXJjaGl0ZWN0dXJlOiBzMzkweAotIGltYWdlOiBpYm1jb20vaWNwLW5vZGVqcy1zYW1wbGU6OCAjdGFyZ2V0IGZhdCBtYW5pZmVzdCBuYW1lICh3aWxsIGJlIHByZWZpeGVkIHdpdGggcmVnaXN0cnkgaG9zdG5hbWUpCiAgcmVmZXJlbmNlczoKICAtIHJlcG9zaXRvcnk6IGlibWNvbS9pY3Atbm9kZWpzLXNhbXBsZS1hbWQ2NDo4ICN0YXJnZXQgaW1hZ2UgbmFtZS90YWcgKHdpbGwgYmUgcHJlZml4ZWQgd2l0aCByZWdpc3RyeSBob3N0bmFtZSkKICAgIHB1bGwtcmVwb3NpdG9yeTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlLWFtZDY0OjggI3doZXJlIHRvIHB1bGwgdGhlIGltYWdlIGZyb20KICAgIHBsYXRmb3JtOgogICAgICBvczogbGludXgKICAgICAgYXJjaGl0ZWN0dXJlOiBhbWQ2NAogIC0gcmVwb3NpdG9yeTogaWJtY29tL2ljcC1ub2RlanMtc2FtcGxlLXBwYzY0bGU6OCAjdGFyZ2V0IGltYWdlIG5hbWUvdGFnICh3aWxsIGJlIHByZWZpeGVkIHdpdGggcmVnaXN0cnkgaG9zdG5hbWUpCiAgICBwdWxsLXJlcG9zaXRvcnk6IGlibWNvbS9pY3Atbm9kZWpzLXNhbXBsZS1wcGM2NGxlOjggI3doZXJlIHRvIHB1bGwgdGhlIGltYWdlIGZyb20KICAgIHBsYXRmb3JtOgogICAgICBvczogbGludXgKICAgICAgYXJjaGl0ZWN0dXJlOiBwcGM2NGxlCiAgLSByZXBvc2l0b3J5OiBpYm1jb20vaWNwLW5vZGVqcy1zYW1wbGUtczM5MHg6OCAjdGFyZ2V0IGltYWdlIG5hbWUvdGFnICh3aWxsIGJlIHByZWZpeGVkIHdpdGggcmVnaXN0cnkgaG9zdG5hbWUpCiAgICBwdWxsLXJlcG9zaXRvcnk6IGlibWNvbS9pY3Atbm9kZWpzLXNhbXBsZS1zMzkweDo4ICN3aGVyZSB0byBwdWxsIHRoZSBpbWFnZSBmcm9tCiAgICBwbGF0Zm9ybToKICAgICAgb3M6IGxpbnV4CiAgICAgIGFyY2hpdGVjdHVyZTogczM5MHgK"
        },
        {
          "type_url": "requirements.yaml",
          "value": "ZGVwZW5kZW5jaWVzOgogIC0gbmFtZTogaWJtLXNjaAogICAgcmVwb3NpdG9yeTogIkBzY2giICMjIHdoZXJlIHNjaCBpcyBiYXNlZCBvbiBbTkFNRV0gZnJvbSB0aGUgY21kOiBoZWxtIHJlcG8gYWRkIFtmbGFnc10gW05BTUVdIFtVUkxdCiAgICB2ZXJzaW9uOiAxLjIuNgogICAgYWxpYXM6IHNjaAo="
        },
        {
          "type_url": "values-metadata.yaml",
          "value": "aW1hZ2U6CiAgX19tZXRhZGF0YToKICAgIGxhYmVsOiAiSW1hZ2UiCiAgICBkZXNjcmlwdGlvbjogIkltYWdlIGNvbmZpZ3VyYXRpb24iCiAgcmVwb3NpdG9yeToKICAgIF9fbWV0YWRhdGE6CiAgICAgIG5hbWU6ICJJbWFnZSIKICAgICAgbGFiZWw6ICJJbWFnZSByZXBvc2l0b3J5IgogICAgICBkZXNjcmlwdGlvbjogIkRvY2tlciBpbWFnZSBsb2NhdGlvbiIKICAgICAgdHlwZTogInN0cmluZyIKICAgICAgaW1tdXRhYmxlOiB0cnVlCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgdGFnOgogICAgX19tZXRhZGF0YToKICAgICAgbmFtZTogInRhZyIKICAgICAgbGFiZWw6ICJJbWFnZSB0YWciCiAgICAgIGRlc2NyaXB0aW9uOiAiRGV0ZXJtaW5lcyB0aGUgTm9kZS5qcyB2ZXJzaW9uIHVzZWQgYnkgdGhlIHNhbXBsZSIKICAgICAgb3B0aW9uczogCiAgICAgIC0gbGFiZWw6ICJOb2RlLmpzIDEwIgogICAgICAgIHZhbHVlOiAiMTAiCiAgICAgIC0gbGFiZWw6ICJOb2RlLmpzIDgiCiAgICAgICAgdmFsdWU6ICI4IgogIHB1bGxQb2xpY3k6CiAgICBfX21ldGFkYXRhOgogICAgICBuYW1lOiAicHVsbFBvbGljeSIKICAgICAgbGFiZWw6ICJJbWFnZSBwdWxsIHBvbGljeSIKICAgICAgZGVzY3JpcHRpb246ICJEZXRlcm1pbmVzIHdoZXRoZXIgdG8gcmV1c2UgYSBsb2NhbGx5IGNhY2hlZCBEb2NrZXIgSW1hZ2UiCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGltbXV0YWJsZTogdHJ1ZQogICAgICByZXF1aXJlZDogdHJ1ZQoKcmVzb3VyY2VzOgogIF9fbWV0YWRhdGE6CiAgICBsYWJlbDogIlJlc291cmNlIENvbmZpZ3VyYXRpb24iCiAgICBkZXNjcmlwdGlvbjogIkNvbnRyb2xzIHRoZSBtZW1vcnkgYW5kIENQVSByZXF1aXJlbWVudHMiCiAgcmVxdWVzdHM6CiAgICBjcHU6CiAgICAgIF9fbWV0YWRhdGE6CiAgICAgICAgbGFiZWw6ICJDUFUgcmVxdWVzdCIKICAgICAgICBkZXNjcmlwdGlvbjogIlRoZSByZXF1ZXN0ZWQgQ1BVIgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIG1lbW9yeToKICAgICAgX19tZXRhZGF0YToKICAgICAgICBsYWJlbDogIk1lbW9yeSByZXF1ZXN0IgogICAgICAgIGRlc2NyaXB0aW9uOiAiVGhlIG1lbW9yeSByZXF1ZXN0IgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICBsaW1pdHM6CiAgICBjcHU6CiAgICAgIF9fbWV0YWRhdGE6CiAgICAgICAgbGFiZWw6ICJDUFUgbGltaXQiCiAgICAgICAgZGVzY3JpcHRpb246ICJUaGUgQ1BVIGxpbWl0IgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIG1lbW9yeToKICAgICAgX19tZXRhZGF0YTogCiAgICAgICAgbGFiZWw6ICJNZW1vcnkgbGltaXQiCiAgICAgICAgZGVzY3JpcHRpb246ICJUaGUgbWVtb3J5IGxpbWl0IgogICAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgICAgcmVxdWlyZWQ6IHRydWUKCmxpdmVuZXNzUHJvYmU6CiAgX19tZXRhZGF0YToKICAgIGxhYmVsOiAiTGl2ZW5lc3MgUHJvYmUiCiAgICBkZXNjcmlwdGlvbjogIkFkdmFuY2VkIGNvbnRyb2wgb3ZlciBsaXZlbmVzcyBwcm9iZSIKICBpbml0aWFsRGVsYXlTZWNvbmRzOgogICAgX19tZXRhZGF0YToKICAgICAgbGFiZWw6ICJJbml0aWFsIERlbGF5IgogICAgICBkZXNjcmlwdGlvbjogIlRpbWUgaW4gc2Vjb25kcyBiZWZvcmUgcG9sbGluZyB0aGUgbGl2ZW5lc3MgcHJvYmUgZW5kcG9pbnQiCiAgICAgIHR5cGU6ICJudW1iZXIiCiAgcGVyaW9kU2Vjb25kczoKICAgIF9fbWV0YWRhdGE6CiAgICAgIGxhYmVsOiAiSW5pdGlhbCBEZWxheSIKICAgICAgZGVzY3JpcHRpb246ICJUaW1lIGluIHNlY29uZHMgYmVmb3JlIHBvbGxpbmcgdGhlIGxpdmVuZXNzIHByb2JlIGVuZHBvaW50IgogICAgICB0eXBlOiAibnVtYmVyIgoKc2VydmljZToKICBfX21ldGFkYXRhOgogICAgbGFiZWw6ICJTZXJ2aWNlIGNvbmZpZ3VyYXRpb24iCiAgICBkZXNjcmlwdGlvbjogIkNvbmZpZ3VyYXRpb24gZm9yIHRoZSBTZXJ2aWNlIHJlc291cmNlIgogIHR5cGU6IAogICAgX19tZXRhZGF0YToKICAgICAgbmFtZTogIlR5cGUiCiAgICAgIGxhYmVsOiAiU2VydmljZSB0eXBlIgogICAgICBkZXNjcmlwdGlvbjogIlRoZSBLdWJlcm5ldGVzIHNlcnZpY2UgdHlwZS4iCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGltbXV0YWJsZTogZmFsc2UKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgb3B0aW9uczoKICAgICAgLSBsYWJlbDogIk5vZGUgUG9ydCIKICAgICAgICB2YWx1ZTogIk5vZGVQb3J0IgogICAgICAtIGxhYmVsOiAiQ2x1c3RlciBJUCIKICAgICAgICB2YWx1ZTogIkNsdXN0ZXJJUCIKICBwb3J0OgogICAgX19tZXRhZGF0YToKICAgICAgbmFtZTogIlBvcnQiCiAgICAgIGxhYmVsOiAiUG9ydCIKICAgICAgZGVzY3JpcHRpb246ICJUaGlzIGlzIHRoZSBwb3J0IGZvciB0aGUgc2VydmljZSBhbmQgbXVzdCBtYXRjaCB0aGUgTm9kZS5qcyBsaXN0ZW4gc2VydmVyIHBvcnQgbnVtYmVyIGFuZCB3aGF0IGlzIGV4cG9zZWQgaW4gdGhlIERvY2tlcmZpbGUiCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGltbXV0YWJsZTogdHJ1ZQogICAgICByZXF1aXJlZDogdHJ1ZQoKYXV0b3NjYWxpbmc6CiAgX19tZXRhZGF0YToKICAgIG5hbWU6ICIiCiAgICBsYWJlbDogIiIKICAgIGRlc2NyaXB0aW9uOiAiQ29uZmlndXJhdGlvbiBvZiBhdXRvc2NhbGluZyIKICBlbmFibGVkOgogICAgX19tZXRhZGF0YToKICAgICAgbmFtZTogIiIKICAgICAgbGFiZWw6ICIiCiAgICAgIGRlc2NyaXB0aW9uOiAiRW5hYmxlIGF1dG9zY2FsaW5nIgogICAgICB0eXBlOiAiYm9vbGVhbiIKICBtaW5SZXBsaWNhczoKICAgIF9fbWV0YWRhdGE6CiAgICAgIG5hbWU6ICIiCiAgICAgIGxhYmVsOiAiIgogICAgICBkZXNjcmlwdGlvbjogIk1pbmltdW0gcG9kcyBmb3IgYXV0b3NjYWxpbmciCiAgICAgIHR5cGU6ICJudW1iZXIiCiAgbWF4UmVwbGljYXM6CiAgICBfX21ldGFkYXRhOgogICAgICBuYW1lOiAiIgogICAgICBsYWJlbDogIiIKICAgICAgZGVzY3JpcHRpb246ICJNYXhpbXVtIHBvZHMgZm9yIGF1dG9zY2FsaW5nIgogICAgICB0eXBlOiAibnVtYmVyIgogIG1ldHJpY3M6CiAgICBjcHU6CiAgICAgIHRhcmdldEF2ZXJhZ2VVdGlsaXphdGlvbjoKICAgICAgICBfX21ldGFkYXRhOgogICAgICAgICAgbmFtZTogIiIKICAgICAgICAgIGxhYmVsOiAiIgogICAgICAgICAgZGVzY3JpcHRpb246ICJUYXJnZXQgYXZlcmFnZSB1dGlsaXphdGlvbiIKICAgICAgICAgIHR5cGU6ICJzdHJpbmciCgojIyBBcmNoIG1ldGFkYXRhCmFyY2g6CiAgX19tZXRhZGF0YToKICAgIG5hbWU6ICIiCiAgICBsYWJlbDogIkFyY2hpdGVjdHVyZSBzY2hlZHVsaW5nIHByZWZlcmVuY2VzIgogICAgZGVzY3JpcHRpb246ICJBcmNoaXRlY3R1cmUgc2NoZWR1bGluZyBwcmVmZXJlbmNlcyAtIFdvcmtlciBub2RlIGFyY2hpdGVjdHVyZSIKICBhbWQ2NDoKICAgIF9fbWV0YWRhdGE6CiAgICAgIG5hbWU6ICJhbWQ2NCIKICAgICAgbGFiZWw6ICJhbWQ2NCBzY2hlZHVsaW5nIHByZWZlcmVuY2UiCiAgICAgIGRlc2NyaXB0aW9uOiAiQXJjaGl0ZWN0dXJlIHByZWZlcmVuY2UgZm9yIHRhcmdldCB3b3JrZXIgbm9kZS4iCiAgICAgIHR5cGU6ICJzdHJpbmciCiAgICAgIGltbXV0YWJsZTogZmFsc2UKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgICAgb3B0aW9uczoKICAgICAgLSBsYWJlbDogIjAgLSBEbyBub3QgdXNlIgogICAgICAgIHZhbHVlOiAiMCAtIERvIG5vdCB1c2UiCiAgICAgIC0gbGFiZWw6ICIxIC0gTGVhc3QgcHJlZmVycmVkIgogICAgICAgIHZhbHVlOiAiMSAtIExlYXN0IHByZWZlcnJlZCIKICAgICAgLSBsYWJlbDogIjIgLSBObyBwcmVmZXJlbmNlIgogICAgICAgIHZhbHVlOiAiMiAtIE5vIHByZWZlcmVuY2UiICAKICAgICAgLSBsYWJlbDogIjMgLSBNb3N0IHByZWZlcnJlZCIKICAgICAgICB2YWx1ZTogIjMgLSBNb3N0IHByZWZlcnJlZCIgIAogICAgIAogIHBwYzY0bGU6CiAgICBfX21ldGFkYXRhOgogICAgICBuYW1lOiAicHBjNjRsZSIKICAgICAgbGFiZWw6ICJwcGM2NGxlIHNjaGVkdWxpbmcgcHJlZmVyZW5jZSIKICAgICAgZGVzY3JpcHRpb246ICJBcmNoaXRlY3R1cmUgcHJlZmVyZW5jZSBmb3IgdGFyZ2V0IHdvcmtlciBub2RlLiIKICAgICAgdHlwZTogInN0cmluZyIKICAgICAgaW1tdXRhYmxlOiBmYWxzZQogICAgICByZXF1aXJlZDogdHJ1ZQogICAgICBvcHRpb25zOgogICAgICAtIGxhYmVsOiAiMCAtIERvIG5vdCB1c2UiCiAgICAgICAgdmFsdWU6ICIwIC0gRG8gbm90IHVzZSIKICAgICAgLSBsYWJlbDogIjEgLSBMZWFzdCBwcmVmZXJyZWQiCiAgICAgICAgdmFsdWU6ICIxIC0gTGVhc3QgcHJlZmVycmVkIgogICAgICAtIGxhYmVsOiAiMiAtIE5vIHByZWZlcmVuY2UiCiAgICAgICAgdmFsdWU6ICIyIC0gTm8gcHJlZmVyZW5jZSIgIAogICAgICAtIGxhYmVsOiAiMyAtIE1vc3QgcHJlZmVycmVkIgogICAgICAgIHZhbHVlOiAiMyAtIE1vc3QgcHJlZmVycmVkIiAgCiAgICAgIAogIHMzOTB4OgogICAgX19tZXRhZGF0YToKICAgICAgbmFtZTogInMzOTB4IgogICAgICBsYWJlbDogInMzOTB4IHNjaGVkdWxpbmcgcHJlZmVyZW5jZSIKICAgICAgZGVzY3JpcHRpb246ICJBcmNoaXRlY3R1cmUgcHJlZmVyZW5jZSBmb3IgdGFyZ2V0IHdvcmtlciBub2RlLiIKICAgICAgdHlwZTogInN0cmluZyIKICAgICAgaW1tdXRhYmxlOiBmYWxzZQogICAgICByZXF1aXJlZDogdHJ1ZQogICAgICBvcHRpb25zOgogICAgICAtIGxhYmVsOiAiMCAtIERvIG5vdCB1c2UiCiAgICAgICAgdmFsdWU6ICIwIC0gRG8gbm90IHVzZSIKICAgICAgLSBsYWJlbDogIjEgLSBMZWFzdCBwcmVmZXJyZWQiCiAgICAgICAgdmFsdWU6ICIxIC0gTGVhc3QgcHJlZmVycmVkIgogICAgICAtIGxhYmVsOiAiMiAtIE5vIHByZWZlcmVuY2UiCiAgICAgICAgdmFsdWU6ICIyIC0gTm8gcHJlZmVyZW5jZSIgIAogICAgICAtIGxhYmVsOiAiMyAtIE1vc3QgcHJlZmVycmVkIgogICAgICAgIHZhbHVlOiAiMyAtIE1vc3QgcHJlZmVycmVkIiAgCg=="
        }
      ]
    },
    "config": {
      "raw": "license: accept\nselectedCluster:\n  -\n    label: local-cluster\n    value: local-cluster\n    ip: 9.30.161.147\n    namespace: local-cluster\nautoscaling:\n  enabled: false\n"
    },
    "manifest": "\n---\n# Source: ibm-nodejs-sample\/templates\/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: helmrelease-ex-nodejssample-nodejs\n  labels:\n    app: \"nodejsSample\"\n    chart: \"ibm-nodejs-sample\"\n    heritage: \"Tiller\"\n    release: \"helmrelease-ex\"\n    component: \"nodejs\"\n  annotations:\n    prometheus.io\/scrape: 'true'\nspec:\n  type: NodePort\n  ports:\n    - port: 3000\n  selector:\n    app: nodejsSample\n    release: helmrelease-ex\n    component: nodejs\n---\n# Source: ibm-nodejs-sample\/templates\/deployment.yaml\n# Licensed Materials - Property of IBM\n# (C) Copyright IBM Corp. 2018. All Rights Reserved.\n# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.\napiVersion: extensions\/v1beta1\nkind: Deployment\nmetadata:\n  name: \"helmrelease-ex-nodejssample-nodejs\"\n  labels:\n    app: \"nodejsSample\"\n    chart: \"ibm-nodejs-sample\"\n    heritage: \"Tiller\"\n    release: \"helmrelease-ex\"\n    component: \"nodejs\"\nspec:\n  selector:\n    matchLabels:\n      release: \"helmrelease-ex\"\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: \"nodejsSample\"\n        chart: \"ibm-nodejs-sample\"\n        heritage: \"Tiller\"\n        release: \"helmrelease-ex\"\n        component: \"nodejs\"\n      # Here's where a user could define their own annotation too\n      annotations:        \n        productID: \"Node.js_Sample_Application_2.0.0_perpetual_00000\"\n        productName: \"Node.js Sample Application\"\n        productVersion: \"2.0.0\"\n    spec:\n      hostNetwork: false\n      hostPID: false\n      hostIPC: false\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n      affinity:        \n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: beta.kubernetes.io\/arch\n                operator: In\n                values:\n                - amd64\n                - ppc64le\n                - s390x\n            \n          preferredDuringSchedulingIgnoredDuringExecution:\n          - weight: 2\n            preference:\n              matchExpressions:\n              - key: \"beta.kubernetes.io\/arch\"\n                operator: \"In\"\n                values:\n                - amd64\n          - weight: 2\n            preference:\n              matchExpressions:\n              - key: \"beta.kubernetes.io\/arch\"\n                operator: \"In\"\n                values:\n                - ppc64le\n          - weight: 2\n            preference:\n              matchExpressions:\n              - key: \"beta.kubernetes.io\/arch\"\n                operator: \"In\"\n                values:\n                - s390x\n      containers:\n      - name: ibm-nodejs-sample\n        image: \"ibmcom\/icp-nodejs-sample:10\"\n        imagePullPolicy: Always\n        securityContext:\n          privileged: false\n          readOnlyRootFilesystem: true\n          allowPrivilegeEscalation: false\n          runAsNonRoot: true\n          runAsUser: 1000\n          capabilities:\n            drop:\n            - ALL\n        livenessProbe:\n          httpGet:\n            path: \/health\n            port: 3000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: \/health\n            port: 3000\n        resources:\n          requests:\n            cpu: \"100m\"\n            memory: \"128Mi\"\n          limits:\n            cpu: \"100m\"\n            memory: \"128Mi\"\n        env:\n          - name: PORT\n            value : \"3000\"\n---\n# Source: ibm-nodejs-sample\/templates\/hpa.yaml\n###############################################################################\n# Licensed Materials - Property of IBM.\n# Copyright IBM Corporation 2018. All Rights Reserved.\n# U.S. Government Users Restricted Rights - Use, duplication or disclosure \n# restricted by GSA ADP Schedule Contract with IBM Corp.\n#\n# Contributors:\n#  IBM Corporation - initial API and implementation\n###############################################################################",
    "hooks": [
      {
        "name": "helmrelease-ex-nodejssample-nodejs-main-endpoint-test",
        "kind": "Pod",
        "path": "ibm-nodejs-sample\/templates\/tests\/main-endpoint-test.yaml",
        "manifest": "# Helm test - Checks access to the maim endpoint\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"helmrelease-ex-nodejssample-nodejs-main-endpoint-test\"\n  annotations:\n    \"helm.sh\/hook\": test-success\n  labels:\n    app: \"nodejsSample\"\n    chart: \"ibm-nodejs-sample\"\n    heritage: \"Tiller\"\n    release: \"helmrelease-ex\"\n    component: \"nodejs-main-endpoint-test\"\nspec:\n  hostNetwork: false\n  hostPID: false\n  hostIPC: false\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000 \n  affinity:    \n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: beta.kubernetes.io\/arch\n            operator: In\n            values:\n            - amd64\n            - ppc64le\n            - s390x\n        \n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - amd64\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - ppc64le\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - s390x\n  restartPolicy: Never\n  containers:\n    - name: \"helmrelease-ex-nodejssample-nodejs-main-endpoint-test\"\n      image: \"ibmcom\/icp-nodejs-sample:10\"\n      securityContext:\n        privileged: false\n        readOnlyRootFilesystem: true\n        allowPrivilegeEscalation: false\n        runAsNonRoot: true\n        runAsUser: 1000 \n        capabilities:\n          drop:\n          - ALL\n      command: [\"wget\"]\n      args:  ['helmrelease-ex-nodejssample-nodejs:3000','-O','-']",
        "events": [
          9
        ]
      },
      {
        "name": "helmrelease-ex-nodejssample-nodejs-metrics-endpoint-test",
        "kind": "Pod",
        "path": "ibm-nodejs-sample\/templates\/tests\/metrics-endpoint-test.yaml",
        "manifest": "# Helm test - Checks access to the metrics endpoint\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"helmrelease-ex-nodejssample-nodejs-metrics-endpoint-test\"\n  annotations:\n    \"helm.sh\/hook\": test-success\n  labels:\n    app: \"nodejsSample\"\n    chart: \"ibm-nodejs-sample\"\n    heritage: \"Tiller\"\n    release: \"helmrelease-ex\"\n    component: \"nodejs-metrics-endpoint-test\"\nspec:\n  hostNetwork: false\n  hostPID: false\n  hostIPC: false\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000 \n  affinity:    \n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: beta.kubernetes.io\/arch\n            operator: In\n            values:\n            - amd64\n            - ppc64le\n            - s390x\n        \n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - amd64\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - ppc64le\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - s390x\n  restartPolicy: Never\n  containers:\n    - name: \"helmrelease-ex-nodejssample-nodejs-metrics-endpoint-test\"\n      image: \"ibmcom\/icp-nodejs-sample:10\"\n      securityContext:\n        privileged: false\n        readOnlyRootFilesystem: true\n        allowPrivilegeEscalation: false\n        runAsNonRoot: true\n        runAsUser: 1000\n        capabilities:\n          drop:\n          - ALL\n      command: [\"wget\"]\n      args:  ['helmrelease-ex-nodejssample-nodejs:3000\/metrics','-O','-']",
        "events": [
          9
        ]
      },
      {
        "name": "helmrelease-ex-nodejssample-nodejs-dash-endpoint-test",
        "kind": "Pod",
        "path": "ibm-nodejs-sample\/templates\/tests\/dash-endpoint-test.yaml",
        "manifest": "# Helm test - Checks access to the appmetrics dashboard endpoint\napiVersion: v1\nkind: Pod\nmetadata:\n  name: \"helmrelease-ex-nodejssample-nodejs-dash-endpoint-test\"\n  annotations:\n    \"helm.sh\/hook\": test-success\n  labels:\n    app: \"nodejsSample\"\n    chart: \"ibm-nodejs-sample\"\n    heritage: \"Tiller\"\n    release: \"helmrelease-ex\"\n    component: \"nodejs-dash-endpoint-test\"\nspec:\n  hostNetwork: false\n  hostPID: false\n  hostIPC: false\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000 \n  affinity:    \n    nodeAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: beta.kubernetes.io\/arch\n            operator: In\n            values:\n            - amd64\n            - ppc64le\n            - s390x\n        \n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - amd64\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - ppc64le\n      - weight: 2\n        preference:\n          matchExpressions:\n          - key: \"beta.kubernetes.io\/arch\"\n            operator: \"In\"\n            values:\n            - s390x\n  restartPolicy: Never\n  containers:\n    - name: \"helmrelease-ex-nodejssample-nodejs-dash-endpoint-test\"\n      image: \"ibmcom\/icp-nodejs-sample:10\"\n      securityContext:\n        privileged: false\n        readOnlyRootFilesystem: true\n        allowPrivilegeEscalation: false\n        runAsNonRoot: true\n        runAsUser: 1000 \n        capabilities:\n          drop:\n          - ALL\n      command: [\"wget\"]\n      args:  ['helmrelease-ex-nodejssample-nodejs:3000\/appmetrics-dash','-O','-']",
        "events": [
          9
        ]
      }
    ],
    "version": 1,
    "namespace": "default"
  }