/*
IBM Confidential
OCO Source Materials
(C) Copyright IBM Corporation 2019 All Rights Reserved
The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
*/

package transforms

// import (
// 	"strconv"
// 	"strings"

// 	"github.com/golang/glog"
// 	v1 "github.com/open-cluster-management/va-mcm-controller/pkg/apis/mcm/v1alpha1"
// )

// type VulnerabilityPolicyResource struct {
// 	*v1.VulnerabilityPolicy
// }

// func (v VulnerabilityPolicyResource) BuildNode() Node {
// 	node := transformCommon(v)
// 	apiGroupVersion(v.TypeMeta, &node) // add kind, apigroup and version

// 	// Extract the properties specific to this type
// 	node.Properties["compliant"] = string(v.Status.ComplianceState)
// 	var totalPods int
// 	var podUIDTexts []string
// 	var allPodUids string
// 	for _, oval := range v.Status.CompliancyDetails {
// 		/*
// 					We are parsing a map[string]map[string][]string object m.Status.CompliancyDetails
// 				    Here is an example
// 				    "va-policy-example1": {
// 						"default": [
// 			                "2 mutated pods detected in namespace `default`:[98b3c272-fbff-11e9-aa82-00163e01bcd9,3f4f13f2-f900-11e9-aa82-00163e01bcd9]"
// 								],
// 					  "kube-public": [
// 					      "0 mutated pods detected in namespace `kube-public`:[]"
// 					                ]
// 								            }
// 		*/
// 		for _, ival := range oval {
// 			for _, str := range ival {
// 				substr := strings.Split(str, " ")
// 				podCount, err := strconv.Atoi(substr[0])
// 				if err != nil {
// 					glog.Warning("Parsing error in Compliance Details : Violated pod count may be wrong")
// 				} else {
// 					totalPods = totalPods + podCount
// 				}
// 				cutLeft := strings.SplitAfter(str, "[")        // TrimLeft in Golang has a issue with char [ so using SplitAfter
// 				cutRight := strings.TrimRight(cutLeft[1], "]") // Get whats inbetween []
// 				if len(cutRight) > 0 {
// 					//If there is text
// 					podUIDTexts = append(podUIDTexts, cutRight)
// 				}
// 			}
// 		}
// 	}
// 	allPodUids = strings.Join(podUIDTexts, ",")
// 	node.Properties["vulnerableResources"] = totalPods
// 	node.Properties["remediationAction"] = string(v.Spec.RemediationAction)
// 	node.Properties["severity"] = v.Spec.Severity
// 	node.Metadata["_vulnerableUIDs"] = allPodUids
// 	return node
// }

// func (v VulnerabilityPolicyResource) BuildEdges(ns NodeStore) []Edge {

// 	ret := []Edge{}
// 	UID := prefixedUID(v.UID)
// 	currentVANode := ns.ByUID[UID]
// 	podUIDs := strings.Split(currentVANode.GetMetadata("_vulnerableUIDs"), ",")
// 	if currentVANode.Properties["compliant"] != "NonCompliant" || len(podUIDs) == 0 {
// 		return ret //We need to build edges only if the MAPolicy is not compliant , Or there is no UIDs in status to connect
// 	}
// 	for _, resourceUID := range podUIDs {
// 		vulnerableResource := prefixedUIDStr(resourceUID)
// 		//Check if the resources are present in our system before creating Edges
// 		_, goodResource := ns.ByUID[vulnerableResource]
// 		if !(goodResource) {
// 			glog.V(2).Infof("Resource %s not found - No Edge Created", vulnerableResource)
// 			continue // Resource should be in our Node list to make a edge
// 		}
// 		edgeVal := Edge{
// 			EdgeType:  "violates",
// 			SourceUID: vulnerableResource,
// 			DestUID:   UID,
// 		}
// 		ret = append(ret, edgeVal)
// 		remoteSubscription := getSubscriptionByUID(vulnerableResource, ns)
// 		glog.V(4).Infof("Found subscription %s attached to resource in violation ", remoteSubscription)
// 		if len(remoteSubscription) > 0 {
// 			subEdge := Edge{
// 				EdgeType:  "violates",
// 				SourceUID: remoteSubscription,
// 				DestUID:   UID,
// 			}
// 			ret = append(ret, subEdge)
// 		}
// 	}
// 	return ret
// }
