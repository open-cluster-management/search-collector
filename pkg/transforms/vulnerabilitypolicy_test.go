/*
IBM Confidential
OCO Source Materials
(C) Copyright IBM Corporation 2019 All Rights Reserved
The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
*/

package transforms

// import (
// 	"strings"
// 	"testing"

// 	mcm "github.com/open-cluster-management/va-mcm-controller/pkg/apis/mcm/v1alpha1"
// )

// func TestTransformVulnerabilityPolicy(t *testing.T) {
// 	var v mcm.VulnerabilityPolicy
// 	UnmarshalFile("../../test-data/vulnerability_policy.json", &v, t)
// 	node := VulnerabilityPolicyResource{&v}.BuildNode()
// 	testUids := []string{"98b3c272-fbff-11e9-aa82-00163e01bcd9", "3f4f13f2-f900-11e9-aa82-00163e01bcd9", "eb790c2e-361f-11e9-85ca-00163e019656"}
// 	// Test only the fields that exist in VulnerabilityPolicy - the common test will test the other bits
// 	AssertEqual("kind", node.Properties["kind"], "VulnerabilityPolicy", t)
// 	AssertEqual("compliant", node.Properties["compliant"], "NonCompliant", t)
// 	AssertEqual("vulnerableResources", node.Properties["vulnerableResources"], 3, t)
// 	AssertEqual("severity", node.Properties["severity"], "medium", t)
// 	AssertEqual("remediationAction", node.Properties["remediationAction"], "inform", t)

// 	testMap := make(map[string]bool)
// 	actual := strings.Split(node.GetMetadata("_vulnerableUIDs"), ",")
// 	AssertEqual("vulnerableUIDLength", len(testUids), len(actual), t)
// 	//Put the actual values in a Map to  verify
// 	for _, actualItem := range actual {
// 		testMap[actualItem] = true
// 	}
// 	for _, testItem := range testUids {
// 		_, ok := testMap[testItem]
// 		AssertEqual(testItem, ok, true, t)
// 	}
// }
